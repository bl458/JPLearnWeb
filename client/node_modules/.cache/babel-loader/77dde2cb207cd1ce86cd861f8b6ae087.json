{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar ViterbiNode = require(\"./ViterbiNode\");\n\nvar ViterbiLattice = require(\"./ViterbiLattice\");\n\nvar SurrogateAwareString = require(\"../util/SurrogateAwareString\");\n/**\n * ViterbiBuilder builds word lattice (ViterbiLattice)\n * @param {DynamicDictionaries} dic dictionary\n * @constructor\n */\n\n\nfunction ViterbiBuilder(dic) {\n  this.trie = dic.trie;\n  this.token_info_dictionary = dic.token_info_dictionary;\n  this.unknown_dictionary = dic.unknown_dictionary;\n}\n/**\n * Build word lattice\n * @param {string} sentence_str Input text\n * @returns {ViterbiLattice} Word lattice\n */\n\n\nViterbiBuilder.prototype.build = function (sentence_str) {\n  var lattice = new ViterbiLattice();\n  var sentence = new SurrogateAwareString(sentence_str);\n  var key, trie_id, left_id, right_id, word_cost;\n\n  for (var pos = 0; pos < sentence.length; pos++) {\n    var tail = sentence.slice(pos);\n    var vocabulary = this.trie.commonPrefixSearch(tail);\n\n    for (var n = 0; n < vocabulary.length; n++) {\n      // Words in dictionary do not have surrogate pair (only UCS2 set)\n      trie_id = vocabulary[n].v;\n      key = vocabulary[n].k;\n      var token_info_ids = this.token_info_dictionary.target_map[trie_id];\n\n      for (var i = 0; i < token_info_ids.length; i++) {\n        var token_info_id = parseInt(token_info_ids[i]);\n        left_id = this.token_info_dictionary.dictionary.getShort(token_info_id);\n        right_id = this.token_info_dictionary.dictionary.getShort(token_info_id + 2);\n        word_cost = this.token_info_dictionary.dictionary.getShort(token_info_id + 4); // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n\n        lattice.append(new ViterbiNode(token_info_id, word_cost, pos + 1, key.length, \"KNOWN\", left_id, right_id, key));\n      }\n    } // Unknown word processing\n\n\n    var surrogate_aware_tail = new SurrogateAwareString(tail);\n    var head_char = new SurrogateAwareString(surrogate_aware_tail.charAt(0));\n    var head_char_class = this.unknown_dictionary.lookup(head_char.toString());\n\n    if (vocabulary == null || vocabulary.length === 0 || head_char_class.is_always_invoke === 1) {\n      // Process unknown word\n      key = head_char;\n\n      if (head_char_class.is_grouping === 1 && 1 < surrogate_aware_tail.length) {\n        for (var k = 1; k < surrogate_aware_tail.length; k++) {\n          var next_char = surrogate_aware_tail.charAt(k);\n          var next_char_class = this.unknown_dictionary.lookup(next_char);\n\n          if (head_char_class.class_name !== next_char_class.class_name) {\n            break;\n          }\n\n          key += next_char;\n        }\n      }\n\n      var unk_ids = this.unknown_dictionary.target_map[head_char_class.class_id];\n\n      for (var j = 0; j < unk_ids.length; j++) {\n        var unk_id = parseInt(unk_ids[j]);\n        left_id = this.unknown_dictionary.dictionary.getShort(unk_id);\n        right_id = this.unknown_dictionary.dictionary.getShort(unk_id + 2);\n        word_cost = this.unknown_dictionary.dictionary.getShort(unk_id + 4); // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n\n        lattice.append(new ViterbiNode(unk_id, word_cost, pos + 1, key.length, \"UNKNOWN\", left_id, right_id, key.toString()));\n      }\n    }\n  }\n\n  lattice.appendEos();\n  return lattice;\n};\n\nmodule.exports = ViterbiBuilder;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/node_modules/kuromoji/src/viterbi/ViterbiBuilder.js"],"names":["ViterbiNode","require","ViterbiLattice","SurrogateAwareString","ViterbiBuilder","dic","trie","token_info_dictionary","unknown_dictionary","prototype","build","sentence_str","lattice","sentence","key","trie_id","left_id","right_id","word_cost","pos","length","tail","slice","vocabulary","commonPrefixSearch","n","v","k","token_info_ids","target_map","i","token_info_id","parseInt","dictionary","getShort","append","surrogate_aware_tail","head_char","charAt","head_char_class","lookup","toString","is_always_invoke","is_grouping","next_char","next_char_class","class_name","unk_ids","class_id","j","unk_id","appendEos","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ViterbiNode = require(\"./ViterbiNode\");\nvar ViterbiLattice = require(\"./ViterbiLattice\");\nvar SurrogateAwareString = require(\"../util/SurrogateAwareString\");\n\n/**\n * ViterbiBuilder builds word lattice (ViterbiLattice)\n * @param {DynamicDictionaries} dic dictionary\n * @constructor\n */\nfunction ViterbiBuilder(dic) {\n    this.trie = dic.trie;\n    this.token_info_dictionary = dic.token_info_dictionary;\n    this.unknown_dictionary = dic.unknown_dictionary;\n}\n\n/**\n * Build word lattice\n * @param {string} sentence_str Input text\n * @returns {ViterbiLattice} Word lattice\n */\nViterbiBuilder.prototype.build = function (sentence_str) {\n    var lattice = new ViterbiLattice();\n    var sentence = new SurrogateAwareString(sentence_str);\n\n    var key, trie_id, left_id, right_id, word_cost;\n    for (var pos = 0; pos < sentence.length; pos++) {\n        var tail = sentence.slice(pos);\n        var vocabulary = this.trie.commonPrefixSearch(tail);\n        for (var n = 0; n < vocabulary.length; n++) {  // Words in dictionary do not have surrogate pair (only UCS2 set)\n            trie_id = vocabulary[n].v;\n            key = vocabulary[n].k;\n\n            var token_info_ids = this.token_info_dictionary.target_map[trie_id];\n            for (var i = 0; i < token_info_ids.length; i++) {\n                var token_info_id = parseInt(token_info_ids[i]);\n\n                left_id = this.token_info_dictionary.dictionary.getShort(token_info_id);\n                right_id = this.token_info_dictionary.dictionary.getShort(token_info_id + 2);\n                word_cost = this.token_info_dictionary.dictionary.getShort(token_info_id + 4);\n\n                // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n                lattice.append(new ViterbiNode(token_info_id, word_cost, pos + 1, key.length, \"KNOWN\", left_id, right_id, key));\n            }\n        }\n\n        // Unknown word processing\n        var surrogate_aware_tail = new SurrogateAwareString(tail);\n        var head_char = new SurrogateAwareString(surrogate_aware_tail.charAt(0));\n        var head_char_class = this.unknown_dictionary.lookup(head_char.toString());\n        if (vocabulary == null || vocabulary.length === 0 || head_char_class.is_always_invoke === 1) {\n            // Process unknown word\n            key = head_char;\n            if (head_char_class.is_grouping === 1 && 1 < surrogate_aware_tail.length) {\n                for (var k = 1; k < surrogate_aware_tail.length; k++) {\n                    var next_char = surrogate_aware_tail.charAt(k);\n                    var next_char_class = this.unknown_dictionary.lookup(next_char);\n                    if (head_char_class.class_name !== next_char_class.class_name) {\n                        break;\n                    }\n                    key += next_char;\n                }\n            }\n\n            var unk_ids = this.unknown_dictionary.target_map[head_char_class.class_id];\n            for (var j = 0; j < unk_ids.length; j++) {\n                var unk_id = parseInt(unk_ids[j]);\n\n                left_id = this.unknown_dictionary.dictionary.getShort(unk_id);\n                right_id = this.unknown_dictionary.dictionary.getShort(unk_id + 2);\n                word_cost = this.unknown_dictionary.dictionary.getShort(unk_id + 4);\n\n                // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n                lattice.append(new ViterbiNode(unk_id, word_cost, pos + 1, key.length, \"UNKNOWN\", left_id, right_id, key.toString()));\n            }\n        }\n    }\n    lattice.appendEos();\n\n    return lattice;\n};\n\nmodule.exports = ViterbiBuilder;\n"]},"metadata":{},"sourceType":"script"}