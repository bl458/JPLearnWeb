{"ast":null,"code":"var _jsxFileName = \"/home/byungchan/Projects/react/JapaneseQuiz/client/src/video/Video.js\";\nimport React, { Component } from 'react';\nimport ResponsivePlayer from './ResponsivePlayer';\nimport Subtitle from './Subtitle';\nimport './Video.css';\nimport sub_one from '../assets/subtitle_json/Attack.on.Titan.01.To.You.in.2000.Years.720p.Bluray.x264.Kirion.json';\nimport sub_one_jp from '../assets/subtitle_json/[SubtitleTools.com] [Kamigami] Shingeki no Kyojin - 01 [1280x720 x264 AAC Sub(Chi,Jap)].json';\n\nclass Video extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      url: 'https://www.youtube.com/watch?v=miE97E8Dqko',\n      //Placeholder\n      playedSeconds: 0,\n      playedPercent: 0,\n      engSub: '',\n      jpSub: ''\n    };\n\n    this.handleProgress = state => {\n      this.setState({\n        playedSeconds: state.playedSeconds,\n        playedPercent: state.played\n      });\n    };\n\n    this.updateEngSub = (playedSeconds, playedPercent) => {\n      if (0 < playedPercent && playedPercent < 1) {\n        for (var i = 0; i < sub_one.length; i++) {\n          if (sub_one[i].start < playedSeconds && playedSeconds < sub_one[i].end) {\n            this.setState({\n              engSub: sub_one[i].content\n            });\n            return;\n          }\n        }\n\n        this.setState({\n          engSub: ''\n        });\n      }\n    };\n\n    this.updateJpSub = (playedSeconds, playedPercent) => {\n      if (0 < playedPercent && playedPercent < 1) {\n        for (var i = 0; i < sub_one_jp.length; i++) {\n          if (sub_one_jp[i].start < playedSeconds && playedSeconds < sub_one_jp[i].end) {\n            this.setState({\n              jpSub: sub_one_jp[i].content\n            });\n            return;\n          }\n        }\n\n        this.setState({\n          jpSub: ''\n        });\n      }\n    };\n\n    this.updateSub = (playedSeconds, playedPercent) => {\n      this.updateEngSub(playedSeconds, playedPercent);\n      this.updateJpSub(playedSeconds, playedPercent);\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.updateSub(this.state.playedSeconds, this.state.playedPercent), 0.00000000000000000000000000000000000000000000000000001);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"Video Learning\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"video-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ResponsivePlayer, {\n      url: this.state.url,\n      handleProgress: this.handleProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Subtitle, {\n      id: this.props.id,\n      engSub: this.state.engSub,\n      jpSub: this.state.jpSub,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Video;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/client/src/video/Video.js"],"names":["React","Component","ResponsivePlayer","Subtitle","sub_one","sub_one_jp","Video","state","url","playedSeconds","playedPercent","engSub","jpSub","handleProgress","setState","played","updateEngSub","i","length","start","end","content","updateJpSub","updateSub","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","props","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport ResponsivePlayer from './ResponsivePlayer'\nimport Subtitle from './Subtitle'\nimport './Video.css'\nimport sub_one from '../assets/subtitle_json/Attack.on.Titan.01.To.You.in.2000.Years.720p.Bluray.x264.Kirion.json'\nimport sub_one_jp from '../assets/subtitle_json/[SubtitleTools.com] [Kamigami] Shingeki no Kyojin - 01 [1280x720 x264 AAC Sub(Chi,Jap)].json'\n\n\nclass Video extends Component {\n  state={\n    url: 'https://www.youtube.com/watch?v=miE97E8Dqko', //Placeholder\n    playedSeconds: 0,\n    playedPercent: 0,\n    engSub: '',\n    jpSub: ''\n  }\n\n  handleProgress = (state) => {\n    this.setState({\n        playedSeconds: state.playedSeconds,\n        playedPercent: state.played\n      })\n  }\n\n  updateEngSub = (playedSeconds,playedPercent) => {\n    if (0<playedPercent && playedPercent<1) {\n      for (var i=0; i<sub_one.length; i++) {\n        if (sub_one[i].start < playedSeconds && playedSeconds < sub_one[i].end) {\n          this.setState({\n            engSub: sub_one[i].content\n          })\n          return\n        }\n      }\n      this.setState({\n        engSub: ''\n      })\n    }\n  }\n\n  updateJpSub = (playedSeconds,playedPercent) => {\n    if (0<playedPercent && playedPercent<1) {\n      for (var i=0; i<sub_one_jp.length; i++) {\n        if (sub_one_jp[i].start < playedSeconds && playedSeconds < sub_one_jp[i].end) {\n          this.setState({\n            jpSub: sub_one_jp[i].content\n          })\n          return\n        }\n      }\n      this.setState({\n        jpSub: ''\n      })\n    }\n  }\n\n  updateSub = (playedSeconds,playedPercent) => {\n    this.updateEngSub(playedSeconds, playedPercent)\n    this.updateJpSub(playedSeconds, playedPercent)\n  }\n\n  componentDidMount() {\n    this.interval =\n      setInterval(() =>\n        this.updateSub(this.state.playedSeconds, this.state.playedPercent),\n        0.00000000000000000000000000000000000000000000000000001)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        <div className=\"video-title\">Video Learning</div>\n        <div className=\"video-board\">\n          <ResponsivePlayer\n            url={this.state.url}\n            handleProgress={this.handleProgress}\n          />\n          <Subtitle\n            id={this.props.id}\n            engSub={this.state.engSub}\n            jpSub={this.state.jpSub}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Video\n"]},"metadata":{},"sourceType":"module"}