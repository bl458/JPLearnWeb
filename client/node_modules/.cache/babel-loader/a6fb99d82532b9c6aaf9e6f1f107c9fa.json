{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar doublearray = require(\"doublearray\");\n\nvar TokenInfoDictionary = require(\"./TokenInfoDictionary\");\n\nvar ConnectionCosts = require(\"./ConnectionCosts\");\n\nvar UnknownDictionary = require(\"./UnknownDictionary\");\n/**\n * Dictionaries container for Tokenizer\n * @param {DoubleArray} trie\n * @param {TokenInfoDictionary} token_info_dictionary\n * @param {ConnectionCosts} connection_costs\n * @param {UnknownDictionary} unknown_dictionary\n * @constructor\n */\n\n\nfunction DynamicDictionaries(trie, token_info_dictionary, connection_costs, unknown_dictionary) {\n  if (trie != null) {\n    this.trie = trie;\n  } else {\n    this.trie = doublearray.builder(0).build([{\n      k: \"\",\n      v: 1\n    }]);\n  }\n\n  if (token_info_dictionary != null) {\n    this.token_info_dictionary = token_info_dictionary;\n  } else {\n    this.token_info_dictionary = new TokenInfoDictionary();\n  }\n\n  if (connection_costs != null) {\n    this.connection_costs = connection_costs;\n  } else {\n    // backward_size * backward_size\n    this.connection_costs = new ConnectionCosts(0, 0);\n  }\n\n  if (unknown_dictionary != null) {\n    this.unknown_dictionary = unknown_dictionary;\n  } else {\n    this.unknown_dictionary = new UnknownDictionary();\n  }\n} // from base.dat & check.dat\n\n\nDynamicDictionaries.prototype.loadTrie = function (base_buffer, check_buffer) {\n  this.trie = doublearray.load(base_buffer, check_buffer);\n  return this;\n};\n\nDynamicDictionaries.prototype.loadTokenInfoDictionaries = function (token_info_buffer, pos_buffer, target_map_buffer) {\n  this.token_info_dictionary.loadDictionary(token_info_buffer);\n  this.token_info_dictionary.loadPosVector(pos_buffer);\n  this.token_info_dictionary.loadTargetMap(target_map_buffer);\n  return this;\n};\n\nDynamicDictionaries.prototype.loadConnectionCosts = function (cc_buffer) {\n  this.connection_costs.loadConnectionCosts(cc_buffer);\n  return this;\n};\n\nDynamicDictionaries.prototype.loadUnknownDictionaries = function (unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n  this.unknown_dictionary.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n  return this;\n};\n\nmodule.exports = DynamicDictionaries;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/client/node_modules/kuromoji/src/dict/DynamicDictionaries.js"],"names":["doublearray","require","TokenInfoDictionary","ConnectionCosts","UnknownDictionary","DynamicDictionaries","trie","token_info_dictionary","connection_costs","unknown_dictionary","builder","build","k","v","prototype","loadTrie","base_buffer","check_buffer","load","loadTokenInfoDictionaries","token_info_buffer","pos_buffer","target_map_buffer","loadDictionary","loadPosVector","loadTargetMap","loadConnectionCosts","cc_buffer","loadUnknownDictionaries","unk_buffer","unk_pos_buffer","unk_map_buffer","cat_map_buffer","compat_cat_map_buffer","invoke_def_buffer","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,qBAAD,CAA/B;AAEA;;;;;;;;;;AAQA,SAASI,mBAAT,CAA6BC,IAA7B,EAAmCC,qBAAnC,EAA0DC,gBAA1D,EAA4EC,kBAA5E,EAAgG;AAC5F,MAAIH,IAAI,IAAI,IAAZ,EAAkB;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH,GAFD,MAEO;AACH,SAAKA,IAAL,GAAYN,WAAW,CAACU,OAAZ,CAAoB,CAApB,EAAuBC,KAAvB,CAA6B,CACrC;AAACC,MAAAA,CAAC,EAAE,EAAJ;AAAQC,MAAAA,CAAC,EAAE;AAAX,KADqC,CAA7B,CAAZ;AAGH;;AACD,MAAIN,qBAAqB,IAAI,IAA7B,EAAmC;AAC/B,SAAKA,qBAAL,GAA6BA,qBAA7B;AACH,GAFD,MAEO;AACH,SAAKA,qBAAL,GAA6B,IAAIL,mBAAJ,EAA7B;AACH;;AACD,MAAIM,gBAAgB,IAAI,IAAxB,EAA8B;AAC1B,SAAKA,gBAAL,GAAwBA,gBAAxB;AACH,GAFD,MAEO;AACH;AACA,SAAKA,gBAAL,GAAwB,IAAIL,eAAJ,CAAoB,CAApB,EAAuB,CAAvB,CAAxB;AACH;;AACD,MAAIM,kBAAkB,IAAI,IAA1B,EAAgC;AAC5B,SAAKA,kBAAL,GAA0BA,kBAA1B;AACH,GAFD,MAEO;AACH,SAAKA,kBAAL,GAA0B,IAAIL,iBAAJ,EAA1B;AACH;AACJ,C,CAED;;;AACAC,mBAAmB,CAACS,SAApB,CAA8BC,QAA9B,GAAyC,UAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AAC1E,OAAKX,IAAL,GAAYN,WAAW,CAACkB,IAAZ,CAAiBF,WAAjB,EAA8BC,YAA9B,CAAZ;AACA,SAAO,IAAP;AACH,CAHD;;AAKAZ,mBAAmB,CAACS,SAApB,CAA8BK,yBAA9B,GAA0D,UAAUC,iBAAV,EAA6BC,UAA7B,EAAyCC,iBAAzC,EAA4D;AAClH,OAAKf,qBAAL,CAA2BgB,cAA3B,CAA0CH,iBAA1C;AACA,OAAKb,qBAAL,CAA2BiB,aAA3B,CAAyCH,UAAzC;AACA,OAAKd,qBAAL,CAA2BkB,aAA3B,CAAyCH,iBAAzC;AACA,SAAO,IAAP;AACH,CALD;;AAOAjB,mBAAmB,CAACS,SAApB,CAA8BY,mBAA9B,GAAoD,UAAUC,SAAV,EAAqB;AACrE,OAAKnB,gBAAL,CAAsBkB,mBAAtB,CAA0CC,SAA1C;AACA,SAAO,IAAP;AACH,CAHD;;AAKAtB,mBAAmB,CAACS,SAApB,CAA8Bc,uBAA9B,GAAwD,UAAUC,UAAV,EAAsBC,cAAtB,EAAsCC,cAAtC,EAAsDC,cAAtD,EAAsEC,qBAAtE,EAA6FC,iBAA7F,EAAgH;AACpK,OAAKzB,kBAAL,CAAwBmB,uBAAxB,CAAgDC,UAAhD,EAA4DC,cAA5D,EAA4EC,cAA5E,EAA4FC,cAA5F,EAA4GC,qBAA5G,EAAmIC,iBAAnI;AACA,SAAO,IAAP;AACH,CAHD;;AAKAC,MAAM,CAACC,OAAP,GAAiB/B,mBAAjB","sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar doublearray = require(\"doublearray\");\nvar TokenInfoDictionary = require(\"./TokenInfoDictionary\");\nvar ConnectionCosts = require(\"./ConnectionCosts\");\nvar UnknownDictionary = require(\"./UnknownDictionary\");\n\n/**\n * Dictionaries container for Tokenizer\n * @param {DoubleArray} trie\n * @param {TokenInfoDictionary} token_info_dictionary\n * @param {ConnectionCosts} connection_costs\n * @param {UnknownDictionary} unknown_dictionary\n * @constructor\n */\nfunction DynamicDictionaries(trie, token_info_dictionary, connection_costs, unknown_dictionary) {\n    if (trie != null) {\n        this.trie = trie;\n    } else {\n        this.trie = doublearray.builder(0).build([\n            {k: \"\", v: 1}\n        ]);\n    }\n    if (token_info_dictionary != null) {\n        this.token_info_dictionary = token_info_dictionary;\n    } else {\n        this.token_info_dictionary = new TokenInfoDictionary();\n    }\n    if (connection_costs != null) {\n        this.connection_costs = connection_costs;\n    } else {\n        // backward_size * backward_size\n        this.connection_costs = new ConnectionCosts(0, 0);\n    }\n    if (unknown_dictionary != null) {\n        this.unknown_dictionary = unknown_dictionary;\n    } else {\n        this.unknown_dictionary = new UnknownDictionary();\n    }\n}\n\n// from base.dat & check.dat\nDynamicDictionaries.prototype.loadTrie = function (base_buffer, check_buffer) {\n    this.trie = doublearray.load(base_buffer, check_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadTokenInfoDictionaries = function (token_info_buffer, pos_buffer, target_map_buffer) {\n    this.token_info_dictionary.loadDictionary(token_info_buffer);\n    this.token_info_dictionary.loadPosVector(pos_buffer);\n    this.token_info_dictionary.loadTargetMap(target_map_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadConnectionCosts = function (cc_buffer) {\n    this.connection_costs.loadConnectionCosts(cc_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadUnknownDictionaries = function (unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n    this.unknown_dictionary.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n    return this;\n};\n\nmodule.exports = DynamicDictionaries;\n"]},"metadata":{},"sourceType":"script"}