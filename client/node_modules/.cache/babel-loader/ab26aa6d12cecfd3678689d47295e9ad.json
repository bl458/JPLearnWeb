{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar path = require(\"path\");\n\nvar async = require(\"async\");\n\nvar DynamicDictionaries = require(\"../dict/DynamicDictionaries\");\n/**\n * DictionaryLoader base constructor\n * @param {string} dic_path Dictionary path\n * @constructor\n */\n\n\nfunction DictionaryLoader(dic_path) {\n  this.dic = new DynamicDictionaries();\n  this.dic_path = dic_path;\n}\n\nDictionaryLoader.prototype.loadArrayBuffer = function (file, callback) {\n  throw new Error(\"DictionaryLoader#loadArrayBuffer should be overwrite\");\n};\n/**\n * Load dictionary files\n * @param {DictionaryLoader~onLoad} load_callback Callback function called after loaded\n */\n\n\nDictionaryLoader.prototype.load = function (load_callback) {\n  var dic = this.dic;\n  var dic_path = this.dic_path;\n  var loadArrayBuffer = this.loadArrayBuffer;\n  async.parallel([// Trie\n  function (callback) {\n    async.map([\"base.dat.gz\", \"check.dat.gz\"], function (filename, _callback) {\n      loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n        if (err) {\n          return _callback(err);\n        }\n\n        _callback(null, buffer);\n      });\n    }, function (err, buffers) {\n      if (err) {\n        return callback(err);\n      }\n\n      var base_buffer = new Int32Array(buffers[0]);\n      var check_buffer = new Int32Array(buffers[1]);\n      dic.loadTrie(base_buffer, check_buffer);\n      callback(null);\n    });\n  }, // Token info dictionaries\n  function (callback) {\n    async.map([\"tid.dat.gz\", \"tid_pos.dat.gz\", \"tid_map.dat.gz\"], function (filename, _callback) {\n      loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n        if (err) {\n          return _callback(err);\n        }\n\n        _callback(null, buffer);\n      });\n    }, function (err, buffers) {\n      if (err) {\n        return callback(err);\n      }\n\n      var token_info_buffer = new Uint8Array(buffers[0]);\n      var pos_buffer = new Uint8Array(buffers[1]);\n      var target_map_buffer = new Uint8Array(buffers[2]);\n      dic.loadTokenInfoDictionaries(token_info_buffer, pos_buffer, target_map_buffer);\n      callback(null);\n    });\n  }, // Connection cost matrix\n  function (callback) {\n    loadArrayBuffer(path.join(dic_path, \"cc.dat.gz\"), function (err, buffer) {\n      if (err) {\n        return callback(err);\n      }\n\n      var cc_buffer = new Int16Array(buffer);\n      dic.loadConnectionCosts(cc_buffer);\n      callback(null);\n    });\n  }, // Unknown dictionaries\n  function (callback) {\n    async.map([\"unk.dat.gz\", \"unk_pos.dat.gz\", \"unk_map.dat.gz\", \"unk_char.dat.gz\", \"unk_compat.dat.gz\", \"unk_invoke.dat.gz\"], function (filename, _callback) {\n      loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n        if (err) {\n          return _callback(err);\n        }\n\n        _callback(null, buffer);\n      });\n    }, function (err, buffers) {\n      if (err) {\n        return callback(err);\n      }\n\n      var unk_buffer = new Uint8Array(buffers[0]);\n      var unk_pos_buffer = new Uint8Array(buffers[1]);\n      var unk_map_buffer = new Uint8Array(buffers[2]);\n      var cat_map_buffer = new Uint8Array(buffers[3]);\n      var compat_cat_map_buffer = new Uint32Array(buffers[4]);\n      var invoke_def_buffer = new Uint8Array(buffers[5]);\n      dic.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer); // dic.loadUnknownDictionaries(char_buffer, unk_buffer);\n\n      callback(null);\n    });\n  }], function (err) {\n    load_callback(err, dic);\n  });\n};\n/**\n * Callback\n * @callback DictionaryLoader~onLoad\n * @param {Object} err Error object\n * @param {DynamicDictionaries} dic Loaded dictionary\n */\n\n\nmodule.exports = DictionaryLoader;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/node_modules/kuromoji/src/loader/DictionaryLoader.js"],"names":["path","require","async","DynamicDictionaries","DictionaryLoader","dic_path","dic","prototype","loadArrayBuffer","file","callback","Error","load","load_callback","parallel","map","filename","_callback","join","err","buffer","buffers","base_buffer","Int32Array","check_buffer","loadTrie","token_info_buffer","Uint8Array","pos_buffer","target_map_buffer","loadTokenInfoDictionaries","cc_buffer","Int16Array","loadConnectionCosts","unk_buffer","unk_pos_buffer","unk_map_buffer","cat_map_buffer","compat_cat_map_buffer","Uint32Array","invoke_def_buffer","loadUnknownDictionaries","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar path = require(\"path\");\nvar async = require(\"async\");\nvar DynamicDictionaries = require(\"../dict/DynamicDictionaries\");\n\n/**\n * DictionaryLoader base constructor\n * @param {string} dic_path Dictionary path\n * @constructor\n */\nfunction DictionaryLoader(dic_path) {\n    this.dic = new DynamicDictionaries();\n    this.dic_path = dic_path;\n}\n\nDictionaryLoader.prototype.loadArrayBuffer = function (file, callback) {\n    throw new Error(\"DictionaryLoader#loadArrayBuffer should be overwrite\");\n};\n\n/**\n * Load dictionary files\n * @param {DictionaryLoader~onLoad} load_callback Callback function called after loaded\n */\nDictionaryLoader.prototype.load = function (load_callback) {\n    var dic = this.dic;\n    var dic_path = this.dic_path;\n    var loadArrayBuffer = this.loadArrayBuffer;\n\n    async.parallel([\n        // Trie\n        function (callback) {\n            async.map([ \"base.dat.gz\", \"check.dat.gz\" ], function (filename, _callback) {\n                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var base_buffer = new Int32Array(buffers[0]);\n                var check_buffer = new Int32Array(buffers[1]);\n\n                dic.loadTrie(base_buffer, check_buffer);\n                callback(null);\n            });\n        },\n        // Token info dictionaries\n        function (callback) {\n            async.map([ \"tid.dat.gz\", \"tid_pos.dat.gz\", \"tid_map.dat.gz\" ], function (filename, _callback) {\n                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var token_info_buffer = new Uint8Array(buffers[0]);\n                var pos_buffer = new Uint8Array(buffers[1]);\n                var target_map_buffer = new Uint8Array(buffers[2]);\n\n                dic.loadTokenInfoDictionaries(token_info_buffer, pos_buffer, target_map_buffer);\n                callback(null);\n            });\n        },\n        // Connection cost matrix\n        function (callback) {\n            loadArrayBuffer(path.join(dic_path, \"cc.dat.gz\"), function (err, buffer) {\n                if(err) {\n                    return callback(err);\n                }\n                var cc_buffer = new Int16Array(buffer);\n                dic.loadConnectionCosts(cc_buffer);\n                callback(null);\n            });\n        },\n        // Unknown dictionaries\n        function (callback) {\n            async.map([ \"unk.dat.gz\", \"unk_pos.dat.gz\", \"unk_map.dat.gz\", \"unk_char.dat.gz\", \"unk_compat.dat.gz\", \"unk_invoke.dat.gz\" ], function (filename, _callback) {\n                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var unk_buffer = new Uint8Array(buffers[0]);\n                var unk_pos_buffer = new Uint8Array(buffers[1]);\n                var unk_map_buffer = new Uint8Array(buffers[2]);\n                var cat_map_buffer = new Uint8Array(buffers[3]);\n                var compat_cat_map_buffer = new Uint32Array(buffers[4]);\n                var invoke_def_buffer = new Uint8Array(buffers[5]);\n\n                dic.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n                // dic.loadUnknownDictionaries(char_buffer, unk_buffer);\n                callback(null);\n            });\n        }\n    ], function (err) {\n        load_callback(err, dic);\n    });\n};\n\n/**\n * Callback\n * @callback DictionaryLoader~onLoad\n * @param {Object} err Error object\n * @param {DynamicDictionaries} dic Loaded dictionary\n */\n\nmodule.exports = DictionaryLoader;\n"]},"metadata":{},"sourceType":"script"}