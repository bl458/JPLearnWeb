{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Tokenizer = require(\"./Tokenizer\");\n\nvar DictionaryLoader = require(\"./loader/NodeDictionaryLoader\");\n/**\n * TokenizerBuilder create Tokenizer instance.\n * @param {Object} option JSON object which have key-value pairs settings\n * @param {string} option.dicPath Dictionary directory path (or URL using in browser)\n * @constructor\n */\n\n\nfunction TokenizerBuilder(option) {\n  if (option.dicPath == null) {\n    this.dic_path = \"dict/\";\n  } else {\n    this.dic_path = option.dicPath;\n  }\n}\n/**\n * Build Tokenizer instance by asynchronous manner\n * @param {TokenizerBuilder~onLoad} callback Callback function\n */\n\n\nTokenizerBuilder.prototype.build = function (callback) {\n  var loader = new DictionaryLoader(this.dic_path);\n  loader.load(function (err, dic) {\n    callback(err, new Tokenizer(dic));\n  });\n};\n/**\n * Callback used by build\n * @callback TokenizerBuilder~onLoad\n * @param {Object} err Error object\n * @param {Tokenizer} tokenizer Prepared Tokenizer\n */\n\n\nmodule.exports = TokenizerBuilder;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/client/node_modules/kuromoji/src/TokenizerBuilder.js"],"names":["Tokenizer","require","DictionaryLoader","TokenizerBuilder","option","dicPath","dic_path","prototype","build","callback","loader","load","err","dic","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,+BAAD,CAA9B;AAEA;;;;;;;;AAMA,SAASE,gBAAT,CAA0BC,MAA1B,EAAkC;AAC9B,MAAIA,MAAM,CAACC,OAAP,IAAkB,IAAtB,EAA4B;AACxB,SAAKC,QAAL,GAAgB,OAAhB;AACH,GAFD,MAEO;AACH,SAAKA,QAAL,GAAgBF,MAAM,CAACC,OAAvB;AACH;AACJ;AAED;;;;;;AAIAF,gBAAgB,CAACI,SAAjB,CAA2BC,KAA3B,GAAmC,UAAUC,QAAV,EAAoB;AACnD,MAAIC,MAAM,GAAG,IAAIR,gBAAJ,CAAqB,KAAKI,QAA1B,CAAb;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAY,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC5BJ,IAAAA,QAAQ,CAACG,GAAD,EAAM,IAAIZ,SAAJ,CAAca,GAAd,CAAN,CAAR;AACH,GAFD;AAGH,CALD;AAOA;;;;;;;;AAOAC,MAAM,CAACC,OAAP,GAAiBZ,gBAAjB","sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Tokenizer = require(\"./Tokenizer\");\nvar DictionaryLoader = require(\"./loader/NodeDictionaryLoader\");\n\n/**\n * TokenizerBuilder create Tokenizer instance.\n * @param {Object} option JSON object which have key-value pairs settings\n * @param {string} option.dicPath Dictionary directory path (or URL using in browser)\n * @constructor\n */\nfunction TokenizerBuilder(option) {\n    if (option.dicPath == null) {\n        this.dic_path = \"dict/\";\n    } else {\n        this.dic_path = option.dicPath;\n    }\n}\n\n/**\n * Build Tokenizer instance by asynchronous manner\n * @param {TokenizerBuilder~onLoad} callback Callback function\n */\nTokenizerBuilder.prototype.build = function (callback) {\n    var loader = new DictionaryLoader(this.dic_path);\n    loader.load(function (err, dic) {\n        callback(err, new Tokenizer(dic));\n    });\n};\n\n/**\n * Callback used by build\n * @callback TokenizerBuilder~onLoad\n * @param {Object} err Error object\n * @param {Tokenizer} tokenizer Prepared Tokenizer\n */\n\nmodule.exports = TokenizerBuilder;\n"]},"metadata":{},"sourceType":"script"}