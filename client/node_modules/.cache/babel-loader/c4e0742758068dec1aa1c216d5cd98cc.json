{"ast":null,"code":"var _jsxFileName = \"/home/byungchan/Projects/react/JapaneseQuiz/client/src/nav/GoogleBtn.js\";\nimport React, { Component } from 'react';\nimport { OAuth2Client } from 'google-auth-library';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nconst CLIENT_ID = '153651118145-gp8r1v7josbjmcr60rpjeupu1pdo2rmh.apps.googleusercontent.com';\n\nclass GoogleBtn extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLogined: false,\n      id: '',\n      email: '',\n      name: '',\n      quizPlaying: 0\n    };\n\n    this.login = response => {\n      console.log('Entered login');\n      this.verify(response).then(payload => fetch(`http://localhost:4000/register?googleId=${payload['sub']}&name=${payload['name']}&email=${payload['email']}`)).then(this.setState({\n        isLogined: true,\n        id: response.profileObj.googleId,\n        email: response.profileObj.email,\n        name: response.profileObj.name,\n        quizPlaying: 0\n      })).then(this.props.onLogInOut(this.state.id, this.state.email, this.state.name, this.state.quizPlaying)).catch(err => console.error(err));\n      console.log('In GoogleBtn.js: Id: ', this.state.id, 'Email: ', this.state.email, '\\nName: ', this.state.name);\n    };\n\n    this.logout = response => {\n      console.log('Entered logout');\n      this.setState(state => ({\n        isLogined: false,\n        id: '',\n        email: '',\n        name: '',\n        quizPlaying: 0\n      }));\n      this.props.onLogInOut(this.state.id, this.state.email, this.state.name, this.state.quizPlaying);\n      console.log('Email: ', this.state.email, '\\nName: ', this.state.name, '\\nQuizPlaying: ', this.state.quizPlaying);\n    };\n\n    this.handleLoginFailure = response => {// alert('Failed to log in')\n    };\n\n    this.handleLogoutFailure = response => {\n      alert('Failed to log out');\n    };\n  }\n\n  async verify(response) {\n    try {\n      const client = new OAuth2Client(CLIENT_ID);\n      const ticket = await client.verifyIdToken({\n        idToken: response.tokenObj.id_token,\n        audience: CLIENT_ID\n      });\n      const payload = ticket.getPayload();\n      return payload;\n    } catch (error) {\n      alert('Cannot authenticate login');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }, this.state.isLogined ? /*#__PURE__*/React.createElement(GoogleLogout, {\n      clientId: CLIENT_ID,\n      buttonText: \"Logout\",\n      onLogoutSuccess: this.logout,\n      onFailure: this.handleLogoutFailure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }) : /*#__PURE__*/React.createElement(GoogleLogin, {\n      clientId: CLIENT_ID,\n      buttonText: \"Login\",\n      isSignedIn: true,\n      onSuccess: this.login,\n      onFailure: this.handleLoginFailure,\n      responseType: \"code token\",\n      prompt: \"consent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default GoogleBtn;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/client/src/nav/GoogleBtn.js"],"names":["React","Component","OAuth2Client","GoogleLogin","GoogleLogout","CLIENT_ID","GoogleBtn","state","isLogined","id","email","name","quizPlaying","login","response","console","log","verify","then","payload","fetch","setState","profileObj","googleId","props","onLogInOut","catch","err","error","logout","handleLoginFailure","handleLogoutFailure","alert","client","ticket","verifyIdToken","idToken","tokenObj","id_token","audience","getPayload","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {OAuth2Client} from 'google-auth-library'\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'\n\nconst CLIENT_ID = '153651118145-gp8r1v7josbjmcr60rpjeupu1pdo2rmh.apps.googleusercontent.com'\n\nclass GoogleBtn extends Component {\n  state = {\n    isLogined: false,\n    id: '',\n    email: '',\n    name: '',\n    quizPlaying: 0\n  }\n\n  async verify(response) {\n    try {\n      const client = new OAuth2Client(CLIENT_ID)\n      const ticket= await client.verifyIdToken({\n        idToken: response.tokenObj.id_token,\n        audience: CLIENT_ID\n      })\n      const payload = ticket.getPayload()\n      return payload\n    } catch(error) {\n      alert('Cannot authenticate login')\n    }\n  }\n\n  login = (response) => {\n    console.log('Entered login')\n\n    this.verify(response)\n    .then(payload => fetch(`http://localhost:4000/register?googleId=${payload['sub']}&name=${payload['name']}&email=${payload['email']}`))\n    .then(this.setState({\n      isLogined: true,\n      id: response.profileObj.googleId,\n      email: response.profileObj.email,\n      name: response.profileObj.name,\n      quizPlaying: 0\n    }))\n    .then(this.props.onLogInOut(this.state.id, this.state.email, this.state.name, this.state.quizPlaying))\n    .catch(err => console.error(err))\n\n    console.log('In GoogleBtn.js: Id: ', this.state.id, 'Email: ', this.state.email, '\\nName: ', this.state.name)\n  }\n\n  logout = (response) => {\n    console.log('Entered logout')\n    this.setState(state => ({\n      isLogined: false,\n      id: '',\n      email: '',\n      name: '',\n      quizPlaying: 0\n    }))\n    this.props.onLogInOut(this.state.id, this.state.email, this.state.name, this.state.quizPlaying)\n    console.log('Email: ', this.state.email, '\\nName: ', this.state.name, '\\nQuizPlaying: ', this.state.quizPlaying)\n  }\n\n  handleLoginFailure = (response) => {\n    // alert('Failed to log in')\n  }\n\n  handleLogoutFailure = (response) => {\n    alert('Failed to log out')\n  }\n\n  render() {\n    return (\n    <div>\n      { this.state.isLogined ?\n        <GoogleLogout\n          clientId={CLIENT_ID}\n          buttonText='Logout'\n          onLogoutSuccess={ this.logout }\n          onFailure={ this.handleLogoutFailure }\n        />\n        :\n        <GoogleLogin\n          clientId={CLIENT_ID}\n          buttonText='Login'\n          isSignedIn={true}\n          onSuccess={ this.login }\n          onFailure={ this.handleLoginFailure }\n          responseType='code token'\n          prompt='consent'\n        />\n      }\n\n    </div>\n    )\n  }\n}\n\nexport default GoogleBtn\n"]},"metadata":{},"sourceType":"module"}