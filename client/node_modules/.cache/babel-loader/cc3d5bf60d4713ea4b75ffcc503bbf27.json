{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n/**\n * Connection costs matrix from cc.dat file.\n * 2 dimension matrix [forward_id][backward_id] -> cost\n * @constructor\n * @param {number} forward_dimension\n * @param {number} backward_dimension\n */\n\nfunction ConnectionCosts(forward_dimension, backward_dimension) {\n  this.forward_dimension = forward_dimension;\n  this.backward_dimension = backward_dimension; // leading 2 integers for forward_dimension, backward_dimension, respectively\n\n  this.buffer = new Int16Array(forward_dimension * backward_dimension + 2);\n  this.buffer[0] = forward_dimension;\n  this.buffer[1] = backward_dimension;\n}\n\nConnectionCosts.prototype.put = function (forward_id, backward_id, cost) {\n  var index = forward_id * this.backward_dimension + backward_id + 2;\n\n  if (this.buffer.length < index + 1) {\n    throw \"ConnectionCosts buffer overflow\";\n  }\n\n  this.buffer[index] = cost;\n};\n\nConnectionCosts.prototype.get = function (forward_id, backward_id) {\n  var index = forward_id * this.backward_dimension + backward_id + 2;\n\n  if (this.buffer.length < index + 1) {\n    throw \"ConnectionCosts buffer overflow\";\n  }\n\n  return this.buffer[index];\n};\n\nConnectionCosts.prototype.loadConnectionCosts = function (connection_costs_buffer) {\n  this.forward_dimension = connection_costs_buffer[0];\n  this.backward_dimension = connection_costs_buffer[1];\n  this.buffer = connection_costs_buffer;\n};\n\nmodule.exports = ConnectionCosts;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/client/node_modules/kuromoji/src/dict/ConnectionCosts.js"],"names":["ConnectionCosts","forward_dimension","backward_dimension","buffer","Int16Array","prototype","put","forward_id","backward_id","cost","index","length","get","loadConnectionCosts","connection_costs_buffer","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AAEA;;;;;;;;AAOA,SAASA,eAAT,CAAyBC,iBAAzB,EAA4CC,kBAA5C,EAAgE;AAC5D,OAAKD,iBAAL,GAAyBA,iBAAzB;AACA,OAAKC,kBAAL,GAA0BA,kBAA1B,CAF4D,CAI5D;;AACA,OAAKC,MAAL,GAAc,IAAIC,UAAJ,CAAeH,iBAAiB,GAAGC,kBAApB,GAAyC,CAAxD,CAAd;AACA,OAAKC,MAAL,CAAY,CAAZ,IAAiBF,iBAAjB;AACA,OAAKE,MAAL,CAAY,CAAZ,IAAiBD,kBAAjB;AACH;;AAEDF,eAAe,CAACK,SAAhB,CAA0BC,GAA1B,GAAgC,UAAUC,UAAV,EAAsBC,WAAtB,EAAmCC,IAAnC,EAAyC;AACrE,MAAIC,KAAK,GAAGH,UAAU,GAAG,KAAKL,kBAAlB,GAAuCM,WAAvC,GAAqD,CAAjE;;AACA,MAAI,KAAKL,MAAL,CAAYQ,MAAZ,GAAqBD,KAAK,GAAG,CAAjC,EAAoC;AAChC,UAAM,iCAAN;AACH;;AACD,OAAKP,MAAL,CAAYO,KAAZ,IAAqBD,IAArB;AACH,CAND;;AAQAT,eAAe,CAACK,SAAhB,CAA0BO,GAA1B,GAAgC,UAAUL,UAAV,EAAsBC,WAAtB,EAAmC;AAC/D,MAAIE,KAAK,GAAGH,UAAU,GAAG,KAAKL,kBAAlB,GAAuCM,WAAvC,GAAqD,CAAjE;;AACA,MAAI,KAAKL,MAAL,CAAYQ,MAAZ,GAAqBD,KAAK,GAAG,CAAjC,EAAoC;AAChC,UAAM,iCAAN;AACH;;AACD,SAAO,KAAKP,MAAL,CAAYO,KAAZ,CAAP;AACH,CAND;;AAQAV,eAAe,CAACK,SAAhB,CAA0BQ,mBAA1B,GAAgD,UAAUC,uBAAV,EAAmC;AAC/E,OAAKb,iBAAL,GAAyBa,uBAAuB,CAAC,CAAD,CAAhD;AACA,OAAKZ,kBAAL,GAA0BY,uBAAuB,CAAC,CAAD,CAAjD;AACA,OAAKX,MAAL,GAAcW,uBAAd;AACH,CAJD;;AAMAC,MAAM,CAACC,OAAP,GAAiBhB,eAAjB","sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Connection costs matrix from cc.dat file.\n * 2 dimension matrix [forward_id][backward_id] -> cost\n * @constructor\n * @param {number} forward_dimension\n * @param {number} backward_dimension\n */\nfunction ConnectionCosts(forward_dimension, backward_dimension) {\n    this.forward_dimension = forward_dimension;\n    this.backward_dimension = backward_dimension;\n\n    // leading 2 integers for forward_dimension, backward_dimension, respectively\n    this.buffer = new Int16Array(forward_dimension * backward_dimension + 2);\n    this.buffer[0] = forward_dimension;\n    this.buffer[1] = backward_dimension;\n}\n\nConnectionCosts.prototype.put = function (forward_id, backward_id, cost) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    this.buffer[index] = cost;\n};\n\nConnectionCosts.prototype.get = function (forward_id, backward_id) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    return this.buffer[index];\n};\n\nConnectionCosts.prototype.loadConnectionCosts = function (connection_costs_buffer) {\n    this.forward_dimension = connection_costs_buffer[0];\n    this.backward_dimension = connection_costs_buffer[1];\n    this.buffer = connection_costs_buffer;\n};\n\nmodule.exports = ConnectionCosts;\n"]},"metadata":{},"sourceType":"script"}