{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n/**\n * Convert String (UTF-16) to UTF-8 ArrayBuffer\n *\n * @param {String} str UTF-16 string to convert\n * @return {Uint8Array} Byte sequence encoded by UTF-8\n */\n\nvar stringToUtf8Bytes = function (str) {\n  // Max size of 1 character is 4 bytes\n  var bytes = new Uint8Array(str.length * 4);\n  var i = 0,\n      j = 0;\n\n  while (i < str.length) {\n    var unicode_code;\n    var utf16_code = str.charCodeAt(i++);\n\n    if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n      // surrogate pair\n      var upper = utf16_code; // high surrogate\n\n      var lower = str.charCodeAt(i++); // low surrogate\n\n      if (lower >= 0xDC00 && lower <= 0xDFFF) {\n        unicode_code = (upper - 0xD800) * (1 << 10) + (1 << 16) + (lower - 0xDC00);\n      } else {\n        // malformed surrogate pair\n        return null;\n      }\n    } else {\n      // not surrogate code\n      unicode_code = utf16_code;\n    }\n\n    if (unicode_code < 0x80) {\n      // 1-byte\n      bytes[j++] = unicode_code;\n    } else if (unicode_code < 1 << 11) {\n      // 2-byte\n      bytes[j++] = unicode_code >>> 6 | 0xC0;\n      bytes[j++] = unicode_code & 0x3F | 0x80;\n    } else if (unicode_code < 1 << 16) {\n      // 3-byte\n      bytes[j++] = unicode_code >>> 12 | 0xE0;\n      bytes[j++] = unicode_code >> 6 & 0x3f | 0x80;\n      bytes[j++] = unicode_code & 0x3F | 0x80;\n    } else if (unicode_code < 1 << 21) {\n      // 4-byte\n      bytes[j++] = unicode_code >>> 18 | 0xF0;\n      bytes[j++] = unicode_code >> 12 & 0x3F | 0x80;\n      bytes[j++] = unicode_code >> 6 & 0x3F | 0x80;\n      bytes[j++] = unicode_code & 0x3F | 0x80;\n    } else {// malformed UCS4 code\n    }\n  }\n\n  return bytes.subarray(0, j);\n};\n/**\n * Convert UTF-8 ArrayBuffer to String (UTF-16)\n *\n * @param {Array} bytes UTF-8 byte sequence to convert\n * @return {String} String encoded by UTF-16\n */\n\n\nvar utf8BytesToString = function (bytes) {\n  var str = \"\";\n  var code, b1, b2, b3, b4, upper, lower;\n  var i = 0;\n\n  while (i < bytes.length) {\n    b1 = bytes[i++];\n\n    if (b1 < 0x80) {\n      // 1 byte\n      code = b1;\n    } else if (b1 >> 5 === 0x06) {\n      // 2 bytes\n      b2 = bytes[i++];\n      code = (b1 & 0x1f) << 6 | b2 & 0x3f;\n    } else if (b1 >> 4 === 0x0e) {\n      // 3 bytes\n      b2 = bytes[i++];\n      b3 = bytes[i++];\n      code = (b1 & 0x0f) << 12 | (b2 & 0x3f) << 6 | b3 & 0x3f;\n    } else {\n      // 4 bytes\n      b2 = bytes[i++];\n      b3 = bytes[i++];\n      b4 = bytes[i++];\n      code = (b1 & 0x07) << 18 | (b2 & 0x3f) << 12 | (b3 & 0x3f) << 6 | b4 & 0x3f;\n    }\n\n    if (code < 0x10000) {\n      str += String.fromCharCode(code);\n    } else {\n      // surrogate pair\n      code -= 0x10000;\n      upper = 0xD800 | code >> 10;\n      lower = 0xDC00 | code & 0x3FF;\n      str += String.fromCharCode(upper, lower);\n    }\n  }\n\n  return str;\n};\n/**\n * Utilities to manipulate byte sequence\n * @param {(number|Uint8Array)} arg Initial size of this buffer (number), or buffer to set (Uint8Array)\n * @constructor\n */\n\n\nfunction ByteBuffer(arg) {\n  var initial_size;\n\n  if (arg == null) {\n    initial_size = 1024 * 1024;\n  } else if (typeof arg === \"number\") {\n    initial_size = arg;\n  } else if (arg instanceof Uint8Array) {\n    this.buffer = arg;\n    this.position = 0; // Overwrite\n\n    return;\n  } else {\n    // typeof arg -> String\n    throw typeof arg + \" is invalid parameter type for ByteBuffer constructor\";\n  } // arg is null or number\n\n\n  this.buffer = new Uint8Array(initial_size);\n  this.position = 0;\n}\n\nByteBuffer.prototype.size = function () {\n  return this.buffer.length;\n};\n\nByteBuffer.prototype.reallocate = function () {\n  var new_array = new Uint8Array(this.buffer.length * 2);\n  new_array.set(this.buffer);\n  this.buffer = new_array;\n};\n\nByteBuffer.prototype.shrink = function () {\n  this.buffer = this.buffer.subarray(0, this.position);\n  return this.buffer;\n};\n\nByteBuffer.prototype.put = function (b) {\n  if (this.buffer.length < this.position + 1) {\n    this.reallocate();\n  }\n\n  this.buffer[this.position++] = b;\n};\n\nByteBuffer.prototype.get = function (index) {\n  if (index == null) {\n    index = this.position;\n    this.position += 1;\n  }\n\n  if (this.buffer.length < index + 1) {\n    return 0;\n  }\n\n  return this.buffer[index];\n}; // Write short to buffer by little endian\n\n\nByteBuffer.prototype.putShort = function (num) {\n  if (0xFFFF < num) {\n    throw num + \" is over short value\";\n  }\n\n  var lower = 0x00FF & num;\n  var upper = (0xFF00 & num) >> 8;\n  this.put(lower);\n  this.put(upper);\n}; // Read short from buffer by little endian\n\n\nByteBuffer.prototype.getShort = function (index) {\n  if (index == null) {\n    index = this.position;\n    this.position += 2;\n  }\n\n  if (this.buffer.length < index + 2) {\n    return 0;\n  }\n\n  var lower = this.buffer[index];\n  var upper = this.buffer[index + 1];\n  var value = (upper << 8) + lower;\n\n  if (value & 0x8000) {\n    value = -(value - 1 ^ 0xFFFF);\n  }\n\n  return value;\n}; // Write integer to buffer by little endian\n\n\nByteBuffer.prototype.putInt = function (num) {\n  if (0xFFFFFFFF < num) {\n    throw num + \" is over integer value\";\n  }\n\n  var b0 = 0x000000FF & num;\n  var b1 = (0x0000FF00 & num) >> 8;\n  var b2 = (0x00FF0000 & num) >> 16;\n  var b3 = (0xFF000000 & num) >> 24;\n  this.put(b0);\n  this.put(b1);\n  this.put(b2);\n  this.put(b3);\n}; // Read integer from buffer by little endian\n\n\nByteBuffer.prototype.getInt = function (index) {\n  if (index == null) {\n    index = this.position;\n    this.position += 4;\n  }\n\n  if (this.buffer.length < index + 4) {\n    return 0;\n  }\n\n  var b0 = this.buffer[index];\n  var b1 = this.buffer[index + 1];\n  var b2 = this.buffer[index + 2];\n  var b3 = this.buffer[index + 3];\n  return (b3 << 24) + (b2 << 16) + (b1 << 8) + b0;\n};\n\nByteBuffer.prototype.readInt = function () {\n  var pos = this.position;\n  this.position += 4;\n  return this.getInt(pos);\n};\n\nByteBuffer.prototype.putString = function (str) {\n  var bytes = stringToUtf8Bytes(str);\n\n  for (var i = 0; i < bytes.length; i++) {\n    this.put(bytes[i]);\n  } // put null character as terminal character\n\n\n  this.put(0);\n};\n\nByteBuffer.prototype.getString = function (index) {\n  var buf = [],\n      ch;\n\n  if (index == null) {\n    index = this.position;\n  }\n\n  while (true) {\n    if (this.buffer.length < index + 1) {\n      break;\n    }\n\n    ch = this.get(index++);\n\n    if (ch === 0) {\n      break;\n    } else {\n      buf.push(ch);\n    }\n  }\n\n  this.position = index;\n  return utf8BytesToString(buf);\n};\n\nmodule.exports = ByteBuffer;","map":{"version":3,"sources":["/home/byungchan/Projects/react/JapaneseQuiz/node_modules/kuromoji/src/util/ByteBuffer.js"],"names":["stringToUtf8Bytes","str","bytes","Uint8Array","length","i","j","unicode_code","utf16_code","charCodeAt","upper","lower","subarray","utf8BytesToString","code","b1","b2","b3","b4","String","fromCharCode","ByteBuffer","arg","initial_size","buffer","position","prototype","size","reallocate","new_array","set","shrink","put","b","get","index","putShort","num","getShort","value","putInt","b0","getInt","readInt","pos","putString","getString","buf","ch","push","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Convert String (UTF-16) to UTF-8 ArrayBuffer\n *\n * @param {String} str UTF-16 string to convert\n * @return {Uint8Array} Byte sequence encoded by UTF-8\n */\nvar stringToUtf8Bytes = function (str) {\n\n    // Max size of 1 character is 4 bytes\n    var bytes = new Uint8Array(str.length * 4);\n\n    var i = 0, j = 0;\n\n    while (i < str.length) {\n        var unicode_code;\n\n        var utf16_code = str.charCodeAt(i++);\n        if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n            // surrogate pair\n            var upper = utf16_code;           // high surrogate\n            var lower = str.charCodeAt(i++);  // low surrogate\n\n            if (lower >= 0xDC00 && lower <= 0xDFFF) {\n                unicode_code =\n                    (upper - 0xD800) * (1 << 10) + (1 << 16) +\n                    (lower - 0xDC00);\n            } else {\n                // malformed surrogate pair\n                return null;\n            }\n        } else {\n            // not surrogate code\n            unicode_code = utf16_code;\n        }\n\n        if (unicode_code < 0x80) {\n            // 1-byte\n            bytes[j++] = unicode_code;\n\n        } else if (unicode_code < (1 << 11)) {\n            // 2-byte\n            bytes[j++] = (unicode_code >>> 6) | 0xC0;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else if (unicode_code < (1 << 16)) {\n            // 3-byte\n            bytes[j++] = (unicode_code >>> 12) | 0xE0;\n            bytes[j++] = ((unicode_code >> 6) & 0x3f) | 0x80;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else if (unicode_code < (1 << 21)) {\n            // 4-byte\n            bytes[j++] = (unicode_code >>> 18) | 0xF0;\n            bytes[j++] = ((unicode_code >> 12) & 0x3F) | 0x80;\n            bytes[j++] = ((unicode_code >> 6) & 0x3F) | 0x80;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else {\n            // malformed UCS4 code\n        }\n    }\n\n    return bytes.subarray(0, j);\n};\n\n/**\n * Convert UTF-8 ArrayBuffer to String (UTF-16)\n *\n * @param {Array} bytes UTF-8 byte sequence to convert\n * @return {String} String encoded by UTF-16\n */\nvar utf8BytesToString = function (bytes) {\n\n    var str = \"\";\n    var code, b1, b2, b3, b4, upper, lower;\n    var i = 0;\n\n    while (i < bytes.length) {\n\n        b1 = bytes[i++];\n\n        if (b1 < 0x80) {\n            // 1 byte\n            code = b1;\n        } else if ((b1 >> 5) === 0x06) {\n            // 2 bytes\n            b2 = bytes[i++];\n            code = ((b1 & 0x1f) << 6) | (b2 & 0x3f);\n        } else if ((b1 >> 4) === 0x0e) {\n            // 3 bytes\n            b2 = bytes[i++];\n            b3 = bytes[i++];\n            code = ((b1 & 0x0f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x3f);\n        } else {\n            // 4 bytes\n            b2 = bytes[i++];\n            b3 = bytes[i++];\n            b4 = bytes[i++];\n            code = ((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6) | (b4 & 0x3f);\n        }\n\n        if (code < 0x10000) {\n            str += String.fromCharCode(code);\n        } else {\n            // surrogate pair\n            code -= 0x10000;\n            upper = (0xD800 | (code >> 10));\n            lower = (0xDC00 | (code & 0x3FF));\n            str += String.fromCharCode(upper, lower);\n        }\n    }\n\n    return str;\n};\n\n/**\n * Utilities to manipulate byte sequence\n * @param {(number|Uint8Array)} arg Initial size of this buffer (number), or buffer to set (Uint8Array)\n * @constructor\n */\nfunction ByteBuffer(arg) {\n    var initial_size;\n    if (arg == null) {\n        initial_size = 1024 * 1024;\n    } else if (typeof arg === \"number\") {\n        initial_size = arg;\n    } else if (arg instanceof Uint8Array) {\n        this.buffer = arg;\n        this.position = 0;  // Overwrite\n        return;\n    } else {\n        // typeof arg -> String\n        throw typeof arg + \" is invalid parameter type for ByteBuffer constructor\";\n    }\n    // arg is null or number\n    this.buffer = new Uint8Array(initial_size);\n    this.position = 0;\n}\n\nByteBuffer.prototype.size = function () {\n    return this.buffer.length;\n};\n\nByteBuffer.prototype.reallocate = function () {\n    var new_array = new Uint8Array(this.buffer.length * 2);\n    new_array.set(this.buffer);\n    this.buffer = new_array;\n};\n\nByteBuffer.prototype.shrink = function () {\n    this.buffer = this.buffer.subarray(0, this.position);\n    return this.buffer;\n};\n\nByteBuffer.prototype.put = function (b) {\n    if (this.buffer.length < this.position + 1) {\n        this.reallocate();\n    }\n    this.buffer[this.position++] = b;\n};\n\nByteBuffer.prototype.get = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 1;\n    }\n    if (this.buffer.length < index + 1) {\n        return 0;\n    }\n    return this.buffer[index];\n};\n\n// Write short to buffer by little endian\nByteBuffer.prototype.putShort = function (num) {\n    if (0xFFFF < num) {\n        throw num + \" is over short value\";\n    }\n    var lower = (0x00FF & num);\n    var upper = (0xFF00 & num) >> 8;\n    this.put(lower);\n    this.put(upper);\n};\n\n// Read short from buffer by little endian\nByteBuffer.prototype.getShort = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 2;\n    }\n    if (this.buffer.length < index + 2) {\n        return 0;\n    }\n    var lower = this.buffer[index];\n    var upper = this.buffer[index + 1];\n    var value = (upper << 8) + lower;\n    if (value & 0x8000) {\n\tvalue = -((value - 1) ^ 0xFFFF);\n    }\n    return value;\n};\n\n// Write integer to buffer by little endian\nByteBuffer.prototype.putInt = function (num) {\n    if (0xFFFFFFFF < num) {\n        throw num + \" is over integer value\";\n    }\n    var b0 = (0x000000FF & num);\n    var b1 = (0x0000FF00 & num) >> 8;\n    var b2 = (0x00FF0000 & num) >> 16;\n    var b3 = (0xFF000000 & num) >> 24;\n    this.put(b0);\n    this.put(b1);\n    this.put(b2);\n    this.put(b3);\n};\n\n// Read integer from buffer by little endian\nByteBuffer.prototype.getInt = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 4;\n    }\n    if (this.buffer.length < index + 4) {\n        return 0;\n    }\n    var b0 = this.buffer[index];\n    var b1 = this.buffer[index + 1];\n    var b2 = this.buffer[index + 2];\n    var b3 = this.buffer[index + 3];\n\n    return (b3 << 24) + (b2 << 16) + (b1 << 8) + b0;\n};\n\nByteBuffer.prototype.readInt = function () {\n    var pos = this.position;\n    this.position += 4;\n    return this.getInt(pos);\n};\n\nByteBuffer.prototype.putString = function (str) {\n    var bytes = stringToUtf8Bytes(str);\n    for (var i = 0; i < bytes.length; i++) {\n        this.put(bytes[i]);\n    }\n    // put null character as terminal character\n    this.put(0);\n};\n\nByteBuffer.prototype.getString = function (index) {\n    var buf = [],\n        ch;\n    if (index == null) {\n        index = this.position;\n    }\n    while (true) {\n        if (this.buffer.length < index + 1) {\n            break;\n        }\n        ch = this.get(index++);\n        if (ch === 0) {\n            break;\n        } else {\n            buf.push(ch);\n        }\n    }\n    this.position = index;\n    return utf8BytesToString(buf);\n};\n\nmodule.exports = ByteBuffer;\n"]},"metadata":{},"sourceType":"script"}