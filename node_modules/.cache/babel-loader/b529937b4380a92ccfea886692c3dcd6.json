{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n/**\n * ViterbiSearcher is for searching best Viterbi path\n * @param {ConnectionCosts} connection_costs Connection costs matrix\n * @constructor\n */\n\nfunction ViterbiSearcher(connection_costs) {\n  this.connection_costs = connection_costs;\n}\n/**\n * Search best path by forward-backward algorithm\n * @param {ViterbiLattice} lattice Viterbi lattice to search\n * @returns {Array} Shortest path\n */\n\n\nViterbiSearcher.prototype.search = function (lattice) {\n  lattice = this.forward(lattice);\n  return this.backward(lattice);\n};\n\nViterbiSearcher.prototype.forward = function (lattice) {\n  var i, j, k;\n\n  for (i = 1; i <= lattice.eos_pos; i++) {\n    var nodes = lattice.nodes_end_at[i];\n\n    if (nodes == null) {\n      continue;\n    }\n\n    for (j = 0; j < nodes.length; j++) {\n      var node = nodes[j];\n      var cost = Number.MAX_VALUE;\n      var shortest_prev_node;\n      var prev_nodes = lattice.nodes_end_at[node.start_pos - 1];\n\n      if (prev_nodes == null) {\n        // TODO process unknown words (repair word lattice)\n        continue;\n      }\n\n      for (k = 0; k < prev_nodes.length; k++) {\n        var prev_node = prev_nodes[k];\n        var edge_cost;\n\n        if (node.left_id == null || prev_node.right_id == null) {\n          // TODO assert\n          console.log(\"Left or right is null\");\n          edge_cost = 0;\n        } else {\n          edge_cost = this.connection_costs.get(prev_node.right_id, node.left_id);\n        }\n\n        var _cost = prev_node.shortest_cost + edge_cost + node.cost;\n\n        if (_cost < cost) {\n          shortest_prev_node = prev_node;\n          cost = _cost;\n        }\n      }\n\n      node.prev = shortest_prev_node;\n      node.shortest_cost = cost;\n    }\n  }\n\n  return lattice;\n};\n\nViterbiSearcher.prototype.backward = function (lattice) {\n  var shortest_path = [];\n  var eos = lattice.nodes_end_at[lattice.nodes_end_at.length - 1][0];\n  var node_back = eos.prev;\n\n  if (node_back == null) {\n    return [];\n  }\n\n  while (node_back.type !== \"BOS\") {\n    shortest_path.push(node_back);\n\n    if (node_back.prev == null) {\n      // TODO Failed to back. Process unknown words?\n      return [];\n    }\n\n    node_back = node_back.prev;\n  }\n\n  return shortest_path.reverse();\n};\n\nmodule.exports = ViterbiSearcher;","map":{"version":3,"sources":["/home/byungchan/Projects/JapaneseQuiz/node_modules/kuromoji/src/viterbi/ViterbiSearcher.js"],"names":["ViterbiSearcher","connection_costs","prototype","search","lattice","forward","backward","i","j","k","eos_pos","nodes","nodes_end_at","length","node","cost","Number","MAX_VALUE","shortest_prev_node","prev_nodes","start_pos","prev_node","edge_cost","left_id","right_id","console","log","get","_cost","shortest_cost","prev","shortest_path","eos","node_back","type","push","reverse","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * ViterbiSearcher is for searching best Viterbi path\n * @param {ConnectionCosts} connection_costs Connection costs matrix\n * @constructor\n */\nfunction ViterbiSearcher(connection_costs) {\n    this.connection_costs = connection_costs;\n}\n\n/**\n * Search best path by forward-backward algorithm\n * @param {ViterbiLattice} lattice Viterbi lattice to search\n * @returns {Array} Shortest path\n */\nViterbiSearcher.prototype.search = function (lattice) {\n    lattice = this.forward(lattice);\n    return this.backward(lattice);\n};\n\nViterbiSearcher.prototype.forward = function (lattice) {\n    var i, j, k;\n    for (i = 1; i <= lattice.eos_pos; i++) {\n        var nodes = lattice.nodes_end_at[i];\n        if (nodes == null) {\n            continue;\n        }\n        for (j = 0; j < nodes.length; j++) {\n            var node = nodes[j];\n            var cost = Number.MAX_VALUE;\n            var shortest_prev_node;\n\n            var prev_nodes = lattice.nodes_end_at[node.start_pos - 1];\n            if (prev_nodes == null) {\n                // TODO process unknown words (repair word lattice)\n                continue;\n            }\n            for (k = 0; k < prev_nodes.length; k++) {\n                var prev_node = prev_nodes[k];\n\n                var edge_cost;\n                if (node.left_id == null || prev_node.right_id == null) {\n                    // TODO assert\n                    console.log(\"Left or right is null\");\n                    edge_cost = 0;\n                } else {\n                    edge_cost = this.connection_costs.get(prev_node.right_id, node.left_id);\n                }\n\n                var _cost = prev_node.shortest_cost + edge_cost + node.cost;\n                if (_cost < cost) {\n                    shortest_prev_node = prev_node;\n                    cost = _cost;\n                }\n            }\n\n            node.prev = shortest_prev_node;\n            node.shortest_cost = cost;\n        }\n    }\n    return lattice;\n};\n\nViterbiSearcher.prototype.backward = function (lattice) {\n    var shortest_path = [];\n    var eos = lattice.nodes_end_at[lattice.nodes_end_at.length - 1][0];\n\n    var node_back = eos.prev;\n    if (node_back == null) {\n        return [];\n    }\n    while (node_back.type !== \"BOS\") {\n        shortest_path.push(node_back);\n        if (node_back.prev == null) {\n            // TODO Failed to back. Process unknown words?\n            return [];\n        }\n        node_back = node_back.prev;\n    }\n\n    return shortest_path.reverse();\n};\n\nmodule.exports = ViterbiSearcher;\n"]},"metadata":{},"sourceType":"script"}