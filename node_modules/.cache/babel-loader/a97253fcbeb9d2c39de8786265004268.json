{"ast":null,"code":"var _jsxFileName = \"/home/byungchan/Projects/JapaneseQuiz/src/nav/GoogleBtn.js\";\nimport React, { Component } from 'react';\nimport { OAuth2Client } from 'google-auth-library';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'; // Replace the value below with your own Client_ID from https://console.developers.google.com/apis\n\nconst CLIENT_ID = '153651118145-gp8r1v7josbjmcr60rpjeupu1pdo2rmh.apps.googleusercontent.com';\n\nclass GoogleBtn extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLogined: false,\n      id: '',\n      email: '',\n      username: ''\n    };\n\n    this.login = response => {\n      console.log('Entered login');\n      this.verify(response).then(payload => fetch(`http://localhost:4000/register?googleId=${payload['sub']}&name=${payload['name']}&email=${payload['email']}`)).then(this.setState({\n        isLogined: true,\n        id: response.profileObj.id,\n        email: response.profileObj.email,\n        username: response.profileObj.name\n      })).catch(err => console.error(err));\n      console.log('Email: ', this.state.email, '\\nName: ', this.state.username);\n    };\n\n    this.logout = response => {\n      console.log('Entered logout');\n      this.setState(state => ({\n        isLogined: false,\n        id: '',\n        email: '',\n        username: ''\n      }));\n      console.log('Email: ', this.state.email, '\\nName: ', this.state.username);\n    };\n\n    this.handleLoginFailure = response => {\n      alert('Failed to log in');\n    };\n\n    this.handleLogoutFailure = response => {\n      alert('Failed to log out');\n    };\n  }\n\n  async verify(response) {\n    try {\n      const client = new OAuth2Client(CLIENT_ID);\n      const ticket = await client.verifyIdToken({\n        idToken: response.tokenObj.id_token,\n        audience: CLIENT_ID\n      });\n      const payload = ticket.getPayload();\n      return payload;\n    } catch (error) {\n      alert('Cannot authenticate login');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }, this.state.isLogined ? /*#__PURE__*/React.createElement(GoogleLogout, {\n      clientId: CLIENT_ID,\n      buttonText: \"Logout\",\n      onLogoutSuccess: this.logout,\n      onFailure: this.handleLogoutFailure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }) : /*#__PURE__*/React.createElement(GoogleLogin, {\n      clientId: CLIENT_ID,\n      buttonText: \"Login\",\n      isSignedIn: true,\n      onSuccess: this.login,\n      onFailure: this.handleLoginFailure,\n      responseType: \"code token\",\n      prompt: \"consent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default GoogleBtn;","map":{"version":3,"sources":["/home/byungchan/Projects/JapaneseQuiz/src/nav/GoogleBtn.js"],"names":["React","Component","OAuth2Client","GoogleLogin","GoogleLogout","CLIENT_ID","GoogleBtn","state","isLogined","id","email","username","login","response","console","log","verify","then","payload","fetch","setState","profileObj","name","catch","err","error","logout","handleLoginFailure","alert","handleLogoutFailure","client","ticket","verifyIdToken","idToken","tokenObj","id_token","audience","getPayload","render"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport {OAuth2Client} from 'google-auth-library'\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'\n\n// Replace the value below with your own Client_ID from https://console.developers.google.com/apis\nconst CLIENT_ID = '153651118145-gp8r1v7josbjmcr60rpjeupu1pdo2rmh.apps.googleusercontent.com';\n\nclass GoogleBtn extends Component {\n  state = {\n    isLogined: false,\n    id: '',\n    email: '',\n    username: ''\n  }\n\n  async verify(response) {\n    try {\n      const client = new OAuth2Client(CLIENT_ID)\n      const ticket= await client.verifyIdToken({\n        idToken: response.tokenObj.id_token,\n        audience: CLIENT_ID\n      })\n      const payload = ticket.getPayload()\n      return payload\n    } catch(error) {\n      alert('Cannot authenticate login')\n    }\n  }\n\n  login = (response) => {\n    console.log('Entered login')\n\n    this.verify(response)\n    .then(payload => fetch(`http://localhost:4000/register?googleId=${payload['sub']}&name=${payload['name']}&email=${payload['email']}`))\n    .then(this.setState({\n      isLogined: true,\n      id: response.profileObj.id,\n      email: response.profileObj.email,\n      username: response.profileObj.name\n    }))\n    .catch(err => console.error(err))\n\n    console.log('Email: ', this.state.email, '\\nName: ', this.state.username)\n  }\n\n  logout = (response) => {\n    console.log('Entered logout')\n    this.setState(state => ({\n      isLogined: false,\n      id: '',\n      email: '',\n      username: ''\n    }));\n    console.log('Email: ', this.state.email, '\\nName: ', this.state.username)\n  }\n\n  handleLoginFailure = (response) => {\n    alert('Failed to log in')\n  }\n\n  handleLogoutFailure = (response) => {\n    alert('Failed to log out')\n  }\n\n  render() {\n    return (\n    <div>\n      { this.state.isLogined ?\n        <GoogleLogout\n          clientId={CLIENT_ID}\n          buttonText='Logout'\n          onLogoutSuccess={ this.logout }\n          onFailure={ this.handleLogoutFailure }\n        />\n        :\n        <GoogleLogin\n          clientId={CLIENT_ID}\n          buttonText='Login'\n          isSignedIn={true}\n          onSuccess={ this.login }\n          onFailure={ this.handleLoginFailure }\n          responseType='code token'\n          prompt='consent'\n        />\n      }\n\n    </div>\n    )\n  }\n}\n\nexport default GoogleBtn;\n"]},"metadata":{},"sourceType":"module"}