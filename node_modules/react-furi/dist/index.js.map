{"version":3,"file":"index.js","sources":["../node_modules/wanakana/es/utils/typeOf.js","../node_modules/wanakana/es/utils/isEmpty.js","../node_modules/wanakana/es/utils/isCharInRange.js","../node_modules/wanakana/es/constants.js","../node_modules/wanakana/es/utils/isCharJapanese.js","../node_modules/wanakana/es/isJapanese.js","../node_modules/wanakana/es/utils/isCharLongDash.js","../node_modules/wanakana/es/utils/isCharHiragana.js","../node_modules/wanakana/es/utils/isCharKatakana.js","../node_modules/wanakana/es/utils/isCharKana.js","../node_modules/wanakana/es/isKana.js","../node_modules/wanakana/es/utils/isCharKanji.js","../node_modules/wanakana/es/isKanji.js","../node_modules/wanakana/es/utils/isCharEnglishPunctuation.js","../node_modules/wanakana/es/utils/isCharJapanesePunctuation.js","../node_modules/wanakana/es/utils/isCharRomaji.js","../node_modules/wanakana/es/tokenize.js","../node_modules/wanakana/es/stripOkurigana.js","../node_modules/wanakana/es/isHiragana.js","../node_modules/wanakana/es/isKatakana.js","../node_modules/just-zip-it/index.js","../src/utils.js","../src/index.js"],"sourcesContent":["/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString.call(value).slice(8, -1).toLowerCase();\n}\n\nexport default typeOf;","import typeOf from './typeOf';\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !input.length;\n}\n\nexport default isEmpty;","import isEmpty from './isEmpty';\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nexport default isCharInRange;","export const VERSION = '4.0.1';\n\nexport const TO_KANA_METHODS = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana'\n};\n\nexport const ROMANIZATIONS = {\n  HEPBURN: 'hepburn'\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nexport const DEFAULT_OPTIONS = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  upcaseKatakana: false,\n  ignoreCase: false,\n  IMEMode: false,\n  romanization: ROMANIZATIONS.HEPBURN\n};\n\n// CharCode References\n// http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n// http://unicode-table.com\n\nexport const LATIN_LOWERCASE_START = 0x61;\nexport const LATIN_LOWERCASE_END = 0x7a;\nexport const LATIN_UPPERCASE_START = 0x41;\nexport const LATIN_UPPERCASE_END = 0x5a;\nexport const LOWERCASE_ZENKAKU_START = 0xff41;\nexport const LOWERCASE_ZENKAKU_END = 0xff5a;\nexport const UPPERCASE_ZENKAKU_START = 0xff21;\nexport const UPPERCASE_ZENKAKU_END = 0xff3a;\nexport const HIRAGANA_START = 0x3041;\nexport const HIRAGANA_END = 0x3096;\nexport const KATAKANA_START = 0x30a1;\nexport const KATAKANA_END = 0x30fc;\nexport const KANJI_START = 0x4e00;\nexport const KANJI_END = 0x9faf;\nexport const PROLONGED_SOUND_MARK = 0x30fc;\nexport const KANA_SLASH_DOT = 0x30fb;\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nexport const KANA_RANGES = [HIRAGANA_CHARS, KATAKANA_CHARS, KANA_PUNCTUATION, HANKAKU_KATAKANA];\n\nexport const JA_PUNCTUATION_RANGES = [CJK_SYMBOLS_PUNCTUATION, KANA_PUNCTUATION, KATAKANA_PUNCTUATION, ZENKAKU_PUNCTUATION_1, ZENKAKU_PUNCTUATION_2, ZENKAKU_PUNCTUATION_3, ZENKAKU_PUNCTUATION_4, ZENKAKU_SYMBOLS_CURRENCY];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nexport const JAPANESE_RANGES = [...KANA_RANGES, ...JA_PUNCTUATION_RANGES, ZENKAKU_UPPERCASE, ZENKAKU_LOWERCASE, ZENKAKU_NUMBERS, COMMON_CJK, RARE_CJK];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [[0x0100, 0x0101], // Ā ā\n[0x0112, 0x0113], // Ē ē\n[0x012a, 0x012b], // Ī ī\n[0x014c, 0x014d], // Ō ō\n[0x016a, 0x016b]];\nconst SMART_QUOTE_RANGES = [[0x2018, 0x2019], // ‘ ’\n[0x201c, 0x201d]];\n\nexport const ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nexport const EN_PUNCTUATION_RANGES = [[0x20, 0x2f], [0x3a, 0x3f], [0x5b, 0x60], [0x7b, 0x7e], ...SMART_QUOTE_RANGES];","import isCharInRange from './isCharInRange';\nimport { JAPANESE_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanese(char = '') {\n  return JAPANESE_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanese;","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharJapanese from './utils/isCharJapanese';\n\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */\nfunction isJapanese(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input) ? false : [...input].every(char => {\n    const isJa = isCharJapanese(char);\n    return !augmented ? isJa : isJa || allowed.test(char);\n  });\n}\n\nexport default isJapanese;","import isEmpty from './isEmpty';\nimport { PROLONGED_SOUND_MARK } from '../constants';\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\nexport default isCharLongDash;","import isEmpty from './isEmpty';\nimport isCharLongDash from './isCharLongDash';\nimport isCharInRange from './isCharInRange';\nimport { HIRAGANA_START, HIRAGANA_END } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\nexport default isCharHiragana;","import { KATAKANA_START, KATAKANA_END } from '../constants';\n\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\nexport default isCharKatakana;","import isEmpty from './isEmpty';\nimport isCharHiragana from './isCharHiragana';\nimport isCharKatakana from './isCharKatakana';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKana(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharHiragana(char) || isCharKatakana(char);\n}\n\nexport default isCharKana;","import isEmpty from './utils/isEmpty';\nimport isCharKana from './utils/isCharKana';\n\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */\nfunction isKana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKana);\n}\n\nexport default isKana;","import { KANJI_START, KANJI_END } from '../constants';\n\nimport isCharInRange from './isCharInRange';\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END);\n}\n\nexport default isCharKanji;","import isEmpty from './utils/isEmpty';\nimport isCharKanji from './utils/isCharKanji';\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\nexport default isKanji;","import isEmpty from './isEmpty';\nimport { EN_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharEnglishPunctuation;","import isEmpty from './isEmpty';\nimport { JA_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanesePunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return JA_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanesePunctuation;","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { ROMAJI_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharRomaji;","import isEmpty from './utils/isEmpty';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isCharJapanesePunctuation from './utils/isCharJapanesePunctuation';\nimport isCharRomaji from './utils/isCharRomaji';\nimport isCharKanji from './utils/isCharKanji';\nimport isCharHiragana from './utils/isCharHiragana';\nimport isCharKatakana from './utils/isCharKatakana';\nimport isCharJapanese from './utils/isCharJapanese';\n\nconst isCharEnSpace = x => x === ' ';\nconst isCharJaSpace = x => x === '　';\nconst isCharJaNum = x => /[０-９]/.test(x);\nconst isCharEnNum = x => /[0-9]/.test(x);\n\nexport const TOKEN_TYPES = {\n  EN: 'en',\n  JA: 'ja',\n  EN_NUM: 'englishNumeral',\n  JA_NUM: 'japaneseNumeral',\n  EN_PUNC: 'englishPunctuation',\n  JA_PUNC: 'japanesePunctuation',\n  KANJI: 'kanji',\n  HIRAGANA: 'hiragana',\n  KATAKANA: 'katakana',\n  SPACE: 'space',\n  OTHER: 'other'\n};\n\n// prettier-ignore\nexport function getType(input, compact = false) {\n  const {\n    EN, JA, EN_NUM, JA_NUM, EN_PUNC, JA_PUNC, KANJI, HIRAGANA, KATAKANA, SPACE, OTHER\n  } = TOKEN_TYPES;\n\n  if (compact) {\n    switch (true) {\n      case isCharJaNum(input):\n        return OTHER;\n      case isCharEnNum(input):\n        return OTHER;\n      case isCharEnSpace(input):\n        return EN;\n      case isCharEnglishPunctuation(input):\n        return OTHER;\n      case isCharJaSpace(input):\n        return JA;\n      case isCharJapanesePunctuation(input):\n        return OTHER;\n      case isCharJapanese(input):\n        return JA;\n      case isCharRomaji(input):\n        return EN;\n      default:\n        return OTHER;\n    }\n  } else {\n    switch (true) {\n      case isCharJaSpace(input):\n        return SPACE;\n      case isCharEnSpace(input):\n        return SPACE;\n      case isCharJaNum(input):\n        return JA_NUM;\n      case isCharEnNum(input):\n        return EN_NUM;\n      case isCharEnglishPunctuation(input):\n        return EN_PUNC;\n      case isCharJapanesePunctuation(input):\n        return JA_PUNC;\n      case isCharKanji(input):\n        return KANJI;\n      case isCharHiragana(input):\n        return HIRAGANA;\n      case isCharKatakana(input):\n        return KATAKANA;\n      case isCharJapanese(input):\n        return JA;\n      case isCharRomaji(input):\n        return EN;\n      default:\n        return OTHER;\n    }\n  }\n}\n\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {Object} [options={ compact: false, detailed: false}] options to modify output style\n * @return {String|Object[]} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */\nfunction tokenize(input, { compact = false, detailed = false } = {}) {\n  if (input == null || isEmpty(input)) {\n    return [];\n  }\n  const chars = [...input];\n  let initial = chars.shift();\n  let prevType = getType(initial, compact);\n  initial = detailed ? { type: prevType, value: initial } : initial;\n\n  const result = chars.reduce((tokens, char) => {\n    const currType = getType(char, compact);\n    const sameType = currType === prevType;\n    prevType = currType;\n    let newValue = char;\n\n    if (sameType) {\n      newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n    }\n\n    return detailed ? tokens.concat({ type: currType, value: newValue }) : tokens.concat(newValue);\n  }, [initial]);\n  return result;\n}\n\nexport default tokenize;","import isJapanese from './isJapanese';\nimport isKana from './isKana';\nimport isKanji from './isKanji';\nimport tokenize from './tokenize';\n\nconst isLeadingWithoutInitialKana = (input, leading) => leading && !isKana(input[0]);\nconst isTrailingWithoutFinalKana = (input, leading) => !leading && !isKana(input[input.length - 1]);\nconst isInvalidMatcher = (input, matchKanji) => matchKanji && ![...matchKanji].some(isKanji) || !matchKanji && isKana(input);\n\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {Object} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */\nfunction stripOkurigana(input = '', { leading = false, matchKanji = '' } = {}) {\n  if (!isJapanese(input) || isLeadingWithoutInitialKana(input, leading) || isTrailingWithoutFinalKana(input, leading) || isInvalidMatcher(input, matchKanji)) {\n    return input;\n  }\n\n  const chars = matchKanji || input;\n  const okuriganaRegex = new RegExp(leading ? `^${tokenize(chars).shift()}` : `${tokenize(chars).pop()}$`);\n  return input.replace(okuriganaRegex, '');\n}\n\nexport default stripOkurigana;","import isEmpty from './utils/isEmpty';\nimport isCharHiragana from './utils/isCharHiragana';\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\nexport default isHiragana;","import isEmpty from './utils/isEmpty';\nimport isCharKatakana from './utils/isCharKatakana';\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\nexport default isKatakana;","module.exports = zip;\n\n/*\n  zip([1, 2, 3]); // [[1], [2], [3]]\n  zip([1, 2, 3], ['a', 'b', 'c']); // [[1, 'a'], [2, 'b'], [3, 'c']]\n  zip([1, 2], ['a', 'b'], [true, false]); //[[1, 'a', true], [2, 'b', false]]\n\n  zip([1, 2, 3], ['a', 'b'], [true]);\n  // [[1, 'a', true], [2, 'b', undefined], [3, undefined, undefined]]\n\n  zip(undefined, {}, false, 1, 'foo'); // throws\n  zip([1, 2], ['a', 'b'], undefined, {}, false, 1, 'foo'); // throws\n  \n*/\n\nfunction zip() {\n  var result = [];\n  var args = Array.prototype.slice.call(arguments);\n  var argsLen = args.length;\n  var maxLen = 0;\n  var i, j;\n\n  if (!argsLen) {\n    throw new Error('zip requires at least one argument');\n  }\n\n  for (i = 0; i < argsLen; i++) {\n    if (!Array.isArray(args[i])) {\n      throw new Error('all arguments must be arrays');\n    }\n    var arrLen = args[i].length;\n    if (arrLen > maxLen) {\n      maxLen = arrLen;\n    }\n  }\n\n  for (i = 0; i < maxLen; i++) {\n    var group = [];\n    for (j = 0; j < argsLen; j++) {\n      if (!Array.isArray(args[j])) {\n        throw new Error('all arguments must be arrays');\n      }\n      group[j] = args[j][i];\n    }\n    result[i] = group;\n  }\n\n  return result;\n}\n","import stripOkurigana from 'wanakana/es/stripOkurigana';\nimport tokenize from 'wanakana/es/tokenize';\nimport isKanji from 'wanakana/es/isKanji';\nimport isKana from 'wanakana/es/isKana';\nimport isHiragana from 'wanakana/es/isHiragana';\nimport isKatakana from 'wanakana/es/isKatakana';\nimport zip from 'just-zip-it';\n\n/**\n * Combines furigana with kanji into an array of string pairs.\n * @param  {String} word vocab kanji word\n * @param  {String} reading vocab kana reading\n * @param  {String|Object} furi furigana placement info\n * @return {Array} furigana/kanji pairs\n * @example\n * combineFuri('お世辞', 'おせじ', '1:せ;2:じ')\n * // => [['', 'お'], ['せ', '世'], ['じ', '辞']]\n * combineFuri('大人しい', 'おとなしい') // smart fallbacks\n * // => [['おとな', '大人'], ['', 'しい']]\n * combineFuri('使い方', 'つかいかた') // smart fallbacks\n * // => [['つか', '使'], ['', 'い'], ['かた', '方']]\n *\n * // special compound readings (義訓/熟字訓) are spread across relevant kanji\n * combineFuri('胡座', 'あぐら', '0:あぐら')\n * // => [['あぐら', '胡座']]\n */\nexport function combineFuri(word = '', reading = '', furi = '') {\n  const furiLocs = parseFuri(furi);\n  // 義訓/熟字訓 words with a single furi loc: 今日 \"0:きょう\"\n  const isSpecialReading = furiLocs.length === 1 && [...word].every(isKanji);\n  const isKanaWord = [...word].every(isKana);\n  const isWanikaniMadness = [...reading].some(isHiragana) && [...reading].some(isKatakana);\n\n  if (word === reading || isKanaWord) {\n    return [['', word]];\n  }\n\n  if (!furi || isSpecialReading || isWanikaniMadness) {\n    return basicFuri(word, reading);\n  }\n\n  return generatePairs(word, furiLocs);\n}\n\n/**\n * Displays simple furigana by removing redundant kana\n * @param  {String} [word=''] 'お見舞い'\n * @param  {String} [reading=''] 'おみまい'\n * @return {Array} [['', 'お'], ['見舞', 'みま'], ['', 'い']]\n */\nexport function basicFuri(word = '', reading = '') {\n  // early return + guard against words like １日 which are tokenized unfavourably\n  if ([...word].every((c) => !isKana(c))) {\n    return [[reading, word]];\n  }\n\n  const [bikago, okurigana] = [\n    reading.slice(0, word.length - stripOkurigana(word, { leading: true }).length),\n    reading.slice(stripOkurigana(reading, { matchKanji: word }).length),\n  ];\n\n  const innerWordTokens = tokenize(removeExtraneousKana(word, bikago, okurigana));\n  let innerReadingChars = removeExtraneousKana(reading, bikago, okurigana);\n\n  const kanjiOddKanaEvenRegex = RegExp(\n    innerWordTokens.map((char) => (isKanji(char) ? '(.*)' : `(${char})`)).join('')\n  );\n\n  [, ...innerReadingChars] = innerReadingChars.match(kanjiOddKanaEvenRegex) || [];\n\n  const ret = zip(innerReadingChars, innerWordTokens).map(skipRedundantReadings);\n\n  if (bikago) {\n    ret.unshift(['', bikago]);\n  }\n\n  if (okurigana) {\n    ret.push(['', okurigana]);\n  }\n\n  return ret;\n}\n\nfunction removeExtraneousKana(str = '', leading = '', trailing = '') {\n  return str.replace(RegExp(`^${leading}`), '').replace(RegExp(`${trailing}$`), '');\n}\n\nfunction skipRedundantReadings([reading, word = '']) {\n  return !reading || reading === word ? ['', word] : [reading, word];\n}\n\nexport function parseFuri(data) {\n  return typeof data === 'string' ? parseFuriString(data) : parseFuriObject(data);\n}\n\n/**\n * Parses furigana placement object\n * @param  {Object} [locations={}] { 1:'せ', 2:'じ' }\n * @return {Array} [ [[1, 2], 'せ'], [[2, 3], 'じ'] ]\n */\nfunction parseFuriObject(locations = {}) {\n  return Object.entries(locations).map(([start, content]) => [\n    [Number(start), Number(start) + 1],\n    content,\n  ]);\n}\n\n/**\n * Parses furigana placement string\n * @param  {String} [locations=''] '1:せ;2:じ'\n * @return {Array} [ [[1, 2], 'せ'], [[2, 3], 'じ'] ]\n */\nfunction parseFuriString(locations = '') {\n  return locations.split(';').map((entry) => {\n    const [indexes, content] = entry.split(':');\n    const [start, end] = indexes.split('-').map(Number);\n    // NOTE: in the JMDict furistring data, the end index is either missing\n    // or it is listed as the *start* index of the final char ¯\\_(ツ)_/¯\n    // so we need to bump it either way to encompass that char\n    return [[start, end ? end + 1 : start + 1], content];\n  });\n}\n\n/**\n * Generates array pairs via furigana location data\n * @param  {String} word 'お世辞'\n * @param  {Array} furiLocs [[[1, 2], 'せ'], [[2, 3], 'じ']]\n * @return {Array} [['', 'お'], ['せ', '世'], ['じ', '辞']]\n */\nexport function generatePairs(word = '', furiLocs = []) {\n  let prevCharEnd = 0;\n\n  return furiLocs.reduce((pairs, [[start, end], furiText], index, source) => {\n    // if no furigana at this index, add intervening chars\n    if (start !== prevCharEnd) {\n      pairs.push(['', word.slice(prevCharEnd, start)]);\n    }\n\n    // add furigana and associated chars\n    pairs.push([furiText, word.slice(start, end)]);\n\n    // if no more furigana left, add any remaining chars/okurigana with blank furi\n    if (end < word.length && !source[index + 1]) {\n      pairs.push(['', word.slice(end)]);\n    }\n\n    prevCharEnd = end;\n    return pairs;\n  }, []);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { combineFuri } from './utils';\n\nconst Wrapper = styled.span`\n  display: inline-flex;\n  flex-flow: row wrap;\n  font-family: 'ヒラギノ角ゴ ProN', 'Hiragino Kaku Gothic ProN', 'TakaoPゴシック', TakaoPGothic,\n    '游ゴシック', '游ゴシック体', YuGothic, 'Yu Gothic', 'メイリオ', Meiryo, 'ＭＳ ゴシック',\n    'MS Gothic', HiraKakuProN-W3, 'MotoyaLCedar', 'Droid Sans Japanese', sans-serif;\n`;\n\nconst Pair = styled.span`\n  display: inline-flex;\n  font-size: 24px;\n  line-height: 1;\n  flex-flow: column nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  align-self: flex-end;\n`;\n\nconst Furi = styled.span`\n  display: block;\n  font-size: 0.5em;\n  letter-spacing: -0.02em;\n  margin: 0 0.1em;\n  padding-top: 0.2em;\n  padding-bottom: 0.1em;\n  user-select: none; /* don't interfere with main text selection */\n  opacity: 0.9;\n`;\n\nconst Text = styled.span`\n  display: block;\n`;\n\nfunction ReactFuri({ word, reading, furi, showFuri, render, ...props }) {\n  const pairs = combineFuri(word, reading, furi);\n\n  return render ? (\n    render({ pairs })\n  ) : (\n    <Wrapper lang=\"ja\" {...props}>\n      {pairs.map(([furiText, text], index) => (\n        // \"list\" is static, index is fine\n        // eslint-disable-next-line react/no-array-index-key\n        <Pair key={index}>\n          {showFuri && <Furi>{furiText}</Furi>}\n          <Text>{text}</Text>\n        </Pair>\n      ))}\n    </Wrapper>\n  );\n}\n\nReactFuri.propTypes = {\n  word: PropTypes.string.isRequired,\n  reading: PropTypes.string,\n  furi: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  showFuri: PropTypes.bool,\n  render: PropTypes.func, // eslint-disable-line react/require-default-props\n};\n\nReactFuri.defaultProps = {\n  reading: '',\n  furi: '',\n  showFuri: true,\n};\n\nReactFuri.Wrapper = Wrapper;\nReactFuri.Pair = Pair;\nReactFuri.Furi = Furi;\nReactFuri.Text = Text;\n\nexport default ReactFuri;\n"],"names":["combineFuri","word","reading","furi","furiLocs","parseFuri","isSpecialReading","length","every","isKanji","isKanaWord","isKana","isWanikaniMadness","some","isHiragana","isKatakana","basicFuri","generatePairs","c","slice","stripOkurigana","leading","matchKanji","bikago","okurigana","innerWordTokens","tokenize","removeExtraneousKana","innerReadingChars","kanjiOddKanaEvenRegex","RegExp","map","char","join","match","ret","zip","skipRedundantReadings","unshift","push","str","trailing","replace","data","parseFuriString","parseFuriObject","locations","Object","entries","start","content","Number","split","entry","indexes","end","prevCharEnd","reduce","pairs","index","source","furiText","Wrapper","styled","span","Pair","Furi","Text","ReactFuri","showFuri","render","props","text","defaultProps"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,MAAM,CAAC,KAAK,EAAE;EACrB,IAAI,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,MAAM,CAAC;GACf;EACD,IAAI,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE;IAC3B,OAAO,OAAO,KAAK,CAAC;GACrB;EACD,OAAO,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;CAC3D;;AC1BD;;;;;AAKA,SAAS,OAAO,CAAC,KAAK,EAAE;EACtB,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;IAC9B,OAAO,IAAI,CAAC;GACb;EACD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;CACtB;;ACTD;;;;;;;AAOA,SAAS,aAAa,CAAC,IAAI,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE;EAC5C,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAChC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EAChC,OAAO,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,CAAC;CACrC;;AC0CM,MAAM,uBAAuB,GAAG,MAAM,CAAC;AAC9C,AAAO,MAAM,qBAAqB,GAAG,MAAM,CAAC;AAC5C,AAAO,MAAM,uBAAuB,GAAG,MAAM,CAAC;AAC9C,AAAO,MAAM,qBAAqB,GAAG,MAAM,CAAC;AAC5C,AAAO,MAAM,cAAc,GAAG,MAAM,CAAC;AACrC,AAAO,MAAM,YAAY,GAAG,MAAM,CAAC;AACnC,AAAO,MAAM,cAAc,GAAG,MAAM,CAAC;AACrC,AAAO,MAAM,YAAY,GAAG,MAAM,CAAC;AACnC,AAAO,MAAM,WAAW,GAAG,MAAM,CAAC;AAClC,AAAO,MAAM,SAAS,GAAG,MAAM,CAAC;AAChC,AAAO,MAAM,oBAAoB,GAAG,MAAM,CAAC;AAC3C,AACA;AACA,MAAM,eAAe,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzC,MAAM,iBAAiB,GAAG,CAAC,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;AAC3E,MAAM,iBAAiB,GAAG,CAAC,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;AAC3E,MAAM,qBAAqB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC/C,MAAM,qBAAqB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC/C,MAAM,qBAAqB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC/C,MAAM,qBAAqB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC/C,MAAM,wBAAwB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;AAElD,MAAM,cAAc,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACxC,MAAM,cAAc,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACxC,MAAM,gBAAgB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC1C,MAAM,oBAAoB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC9C,MAAM,gBAAgB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC1C,MAAM,uBAAuB,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACjD,MAAM,UAAU,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACpC,MAAM,QAAQ,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;AAElC,AAAO,MAAM,WAAW,GAAG,CAAC,cAAc,EAAE,cAAc,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;;AAEhG,AAAO,MAAM,qBAAqB,GAAG,CAAC,uBAAuB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,wBAAwB,CAAC,CAAC;;;;AAI7N,AAAO,MAAM,eAAe,GAAG,CAAC,GAAG,WAAW,EAAE,GAAG,qBAAqB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;;AAEvJ,MAAM,cAAc,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACxC,MAAM,qBAAqB,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC;AAC/C,CAAC,MAAM,EAAE,MAAM,CAAC;AAChB,CAAC,MAAM,EAAE,MAAM,CAAC;AAChB,CAAC,MAAM,EAAE,MAAM,CAAC;AAChB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAClB,MAAM,kBAAkB,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC;AAC5C,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;;AAElB,AAAO,MAAM,aAAa,GAAG,CAAC,cAAc,EAAE,GAAG,qBAAqB,CAAC,CAAC;;AAExE,AAAO,MAAM,qBAAqB,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,GAAG,kBAAkB,CAAC;;8GAAC,9GCtGrH;;;;;AAKA,SAAS,cAAc,CAAC,IAAI,GAAG,EAAE,EAAE;EACjC,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;CAChF;;ACND;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAS,UAAU,CAAC,KAAK,GAAG,EAAE,EAAE,OAAO,EAAE;EACvC,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC;EAC/C,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI;IACvD,MAAM,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IAClC,OAAO,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACvD,CAAC,CAAC;CACJ;;AC5BD;;;;;AAKA,SAAS,cAAc,CAAC,IAAI,GAAG,EAAE,EAAE;EACjC,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAChC,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,oBAAoB,CAAC;CACpD;;ACND;;;;;AAKA,SAAS,cAAc,CAAC,IAAI,GAAG,EAAE,EAAE;EACjC,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAChC,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC;EACtC,OAAO,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;CAC1D;;ACVD;;;;;AAKA,SAAS,cAAc,CAAC,IAAI,GAAG,EAAE,EAAE;EACjC,OAAO,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;CAC1D;;ACPD;;;;;AAKA,SAAS,UAAU,CAAC,IAAI,GAAG,EAAE,EAAE;EAC7B,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAChC,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;CACrD;;ACTD;;;;;;;;;;;;;;;;AAgBA,SAAS,MAAM,CAAC,KAAK,GAAG,EAAE,EAAE;EAC1B,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;EACjC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;CACrC;;ACnBD;;;;;AAKA,SAAS,WAAW,CAAC,IAAI,GAAG,EAAE,EAAE;EAC9B,OAAO,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;CACpD;;ACPD;;;;;;;;;;;;;;;;AAgBA,SAAS,OAAO,CAAC,KAAK,GAAG,EAAE,EAAE;EAC3B,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;EACjC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;CACtC;;AClBD;;;;;AAKA,SAAS,wBAAwB,CAAC,IAAI,GAAG,EAAE,EAAE;EAC3C,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAChC,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;CACtF;;ACRD;;;;;AAKA,SAAS,yBAAyB,CAAC,IAAI,GAAG,EAAE,EAAE;EAC5C,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAChC,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;CACtF;;ACRD;;;;;AAKA,SAAS,YAAY,CAAC,IAAI,GAAG,EAAE,EAAE;EAC/B,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;EAChC,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;CAC9E;;ACHD,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC;AACrC,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC;AACrC,MAAM,WAAW,GAAG,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACzC,MAAM,WAAW,GAAG,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;AAEzC,AAAO,MAAM,WAAW,GAAG;EACzB,EAAE,EAAE,IAAI;EACR,EAAE,EAAE,IAAI;EACR,MAAM,EAAE,gBAAgB;EACxB,MAAM,EAAE,iBAAiB;EACzB,OAAO,EAAE,oBAAoB;EAC7B,OAAO,EAAE,qBAAqB;EAC9B,KAAK,EAAE,OAAO;EACd,QAAQ,EAAE,UAAU;EACpB,QAAQ,EAAE,UAAU;EACpB,KAAK,EAAE,OAAO;EACd,KAAK,EAAE,OAAO;CACf,CAAC;;;AAGF,AAAO,SAAS,OAAO,CAAC,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE;EAC9C,MAAM;IACJ,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK;GAClF,GAAG,WAAW,CAAC;;EAEhB,IAAI,OAAO,EAAE;IACX,QAAQ,IAAI;MACV,KAAK,WAAW,CAAC,KAAK,CAAC;QACrB,OAAO,KAAK,CAAC;MACf,KAAK,WAAW,CAAC,KAAK,CAAC;QACrB,OAAO,KAAK,CAAC;MACf,KAAK,aAAa,CAAC,KAAK,CAAC;QACvB,OAAO,EAAE,CAAC;MACZ,KAAK,wBAAwB,CAAC,KAAK,CAAC;QAClC,OAAO,KAAK,CAAC;MACf,KAAK,aAAa,CAAC,KAAK,CAAC;QACvB,OAAO,EAAE,CAAC;MACZ,KAAK,yBAAyB,CAAC,KAAK,CAAC;QACnC,OAAO,KAAK,CAAC;MACf,KAAK,cAAc,CAAC,KAAK,CAAC;QACxB,OAAO,EAAE,CAAC;MACZ,KAAK,YAAY,CAAC,KAAK,CAAC;QACtB,OAAO,EAAE,CAAC;MACZ;QACE,OAAO,KAAK,CAAC;KAChB;GACF,MAAM;IACL,QAAQ,IAAI;MACV,KAAK,aAAa,CAAC,KAAK,CAAC;QACvB,OAAO,KAAK,CAAC;MACf,KAAK,aAAa,CAAC,KAAK,CAAC;QACvB,OAAO,KAAK,CAAC;MACf,KAAK,WAAW,CAAC,KAAK,CAAC;QACrB,OAAO,MAAM,CAAC;MAChB,KAAK,WAAW,CAAC,KAAK,CAAC;QACrB,OAAO,MAAM,CAAC;MAChB,KAAK,wBAAwB,CAAC,KAAK,CAAC;QAClC,OAAO,OAAO,CAAC;MACjB,KAAK,yBAAyB,CAAC,KAAK,CAAC;QACnC,OAAO,OAAO,CAAC;MACjB,KAAK,WAAW,CAAC,KAAK,CAAC;QACrB,OAAO,KAAK,CAAC;MACf,KAAK,cAAc,CAAC,KAAK,CAAC;QACxB,OAAO,QAAQ,CAAC;MAClB,KAAK,cAAc,CAAC,KAAK,CAAC;QACxB,OAAO,QAAQ,CAAC;MAClB,KAAK,cAAc,CAAC,KAAK,CAAC;QACxB,OAAO,EAAE,CAAC;MACZ,KAAK,YAAY,CAAC,KAAK,CAAC;QACtB,OAAO,EAAE,CAAC;MACZ;QACE,OAAO,KAAK,CAAC;KAChB;GACF;CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DD,SAAS,QAAQ,CAAC,KAAK,EAAE,EAAE,OAAO,GAAG,KAAK,EAAE,QAAQ,GAAG,KAAK,EAAE,GAAG,EAAE,EAAE;EACnE,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;IACnC,OAAO,EAAE,CAAC;GACX;EACD,MAAM,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;EACzB,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;EAC5B,IAAI,QAAQ,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;EACzC,OAAO,GAAG,QAAQ,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;;EAElE,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,KAAK;IAC5C,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,MAAM,QAAQ,GAAG,QAAQ,KAAK,QAAQ,CAAC;IACvC,QAAQ,GAAG,QAAQ,CAAC;IACpB,IAAI,QAAQ,GAAG,IAAI,CAAC;;IAEpB,IAAI,QAAQ,EAAE;MACZ,QAAQ,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,EAAE,IAAI,QAAQ,CAAC;KACtE;;IAED,OAAO,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;GAChG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;EACd,OAAO,MAAM,CAAC;CACf;;AClKD,MAAM,2BAA2B,GAAG,CAAC,KAAK,EAAE,OAAO,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACrF,MAAM,0BAA0B,GAAG,CAAC,KAAK,EAAE,OAAO,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AACpG,MAAM,gBAAgB,GAAG,CAAC,KAAK,EAAE,UAAU,KAAK,UAAU,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;AAmB7H,SAAS,cAAc,CAAC,KAAK,GAAG,EAAE,EAAE,EAAE,OAAO,GAAG,KAAK,EAAE,UAAU,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE;EAC7E,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,2BAA2B,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,0BAA0B,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,gBAAgB,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE;IAC1J,OAAO,KAAK,CAAC;GACd;;EAED,MAAM,KAAK,GAAG,UAAU,IAAI,KAAK,CAAC;EAClC,MAAM,cAAc,GAAG,IAAI,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzG,OAAO,KAAK,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;CAC1C;;AC/BD;;;;;;;;;;;;AAYA,SAAS,UAAU,CAAC,KAAK,GAAG,EAAE,EAAE;EAC9B,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;EACjC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;CACzC;;ACfD;;;;;;;;;;;;;;AAcA,SAAS,UAAU,CAAC,KAAK,GAAG,EAAE,EAAE;EAC9B,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC;EACjC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;CACzC;;ACpBD,aAAc,GAAG,GAAG,CAAC;;;;;;;;;;;;;;;AAerB,SAAS,GAAG,GAAG;EACb,IAAI,MAAM,GAAG,EAAE,CAAC;EAChB,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;EACjD,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;EAC1B,IAAI,MAAM,GAAG,CAAC,CAAC;EACf,IAAI,CAAC,EAAE,CAAC,CAAC;;EAET,IAAI,CAAC,OAAO,EAAE;IACZ,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;GACvD;;EAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;IAC5B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MAC3B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACjD;IACD,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAC5B,IAAI,MAAM,GAAG,MAAM,EAAE;MACnB,MAAM,GAAG,MAAM,CAAC;KACjB;GACF;;EAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;IAC3B,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;MAC5B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;OACjD;MACD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACvB;IACD,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACnB;;EAED,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCD;;;;;;;;;;;;;;;;;;AAkBA,AAAO,SAASA,WAAT,GAAyD;MAApCC,IAAoC,uEAA7B,EAA6B;MAAzBC,OAAyB,uEAAf,EAAe;MAAXC,IAAW,uEAAJ,EAAI;;MACxDC,WAAWC,UAAUF,IAAV,CAAjB;;MAEMG,mBAAmBF,SAASG,MAAT,KAAoB,CAApB,IAAyB,4BAAIN,IAAJ,GAAUO,KAAV,CAAgBC,OAAhB,CAAlD;MACMC,aAAa,4BAAIT,IAAJ,GAAUO,KAAV,CAAgBG,MAAhB,CAAnB;MACMC,oBAAoB,4BAAIV,OAAJ,GAAaW,IAAb,CAAkBC,UAAlB,KAAiC,4BAAIZ,OAAJ,GAAaW,IAAb,CAAkBE,UAAlB,CAA3D;;MAEId,SAASC,OAAT,IAAoBQ,UAAxB,EAAoC;WAC3B,CAAC,CAAC,EAAD,EAAKT,IAAL,CAAD,CAAP;;;MAGE,CAACE,IAAD,IAASG,gBAAT,IAA6BM,iBAAjC,EAAoD;WAC3CI,UAAUf,IAAV,EAAgBC,OAAhB,CAAP;;;SAGKe,cAAchB,IAAd,EAAoBG,QAApB,CAAP;;;;;;;;;AASF,AAAO,SAASY,SAAT,GAA4C;MAAzBf,IAAyB,uEAAlB,EAAkB;MAAdC,OAAc,uEAAJ,EAAI;;;MAE7C,4BAAID,IAAJ,GAAUO,KAAV,CAAgB,UAACU,CAAD;WAAO,CAACP,OAAOO,CAAP,CAAR;GAAhB,CAAJ,EAAwC;WAC/B,CAAC,CAAChB,OAAD,EAAUD,IAAV,CAAD,CAAP;;;aAG0B,CAC1BC,QAAQiB,KAAR,CAAc,CAAd,EAAiBlB,KAAKM,MAAL,GAAca,eAAenB,IAAf,EAAqB,EAAEoB,SAAS,IAAX,EAArB,EAAwCd,MAAvE,CAD0B,EAE1BL,QAAQiB,KAAR,CAAcC,eAAelB,OAAf,EAAwB,EAAEoB,YAAYrB,IAAd,EAAxB,EAA8CM,MAA5D,CAF0B,CANqB;MAM1CgB,MAN0C;MAMlCC,SANkC;;;MAW3CC,kBAAkBC,SAASC,qBAAqB1B,IAArB,EAA2BsB,MAA3B,EAAmCC,SAAnC,CAAT,CAAxB;MACII,oBAAoBD,qBAAqBzB,OAArB,EAA8BqB,MAA9B,EAAsCC,SAAtC,CAAxB;;MAEMK,wBAAwBC,OAC5BL,gBAAgBM,GAAhB,CAAoB,UAACC,IAAD;WAAWvB,QAAQuB,IAAR,IAAgB,MAAhB,SAA6BA,IAA7B,MAAX;GAApB,EAAsEC,IAAtE,CAA2E,EAA3E,CAD4B,CAA9B;;cAI2BL,kBAAkBM,KAAlB,CAAwBL,qBAAxB,KAAkD,EAlB5B;;;;mBAAA;;;MAoB3CM,MAAMC,UAAIR,iBAAJ,EAAuBH,eAAvB,EAAwCM,GAAxC,CAA4CM,qBAA5C,CAAZ;;MAEId,MAAJ,EAAY;QACNe,OAAJ,CAAY,CAAC,EAAD,EAAKf,MAAL,CAAZ;;;MAGEC,SAAJ,EAAe;QACTe,IAAJ,CAAS,CAAC,EAAD,EAAKf,SAAL,CAAT;;;SAGKW,GAAP;;;AAGF,SAASR,oBAAT,GAAqE;MAAvCa,GAAuC,uEAAjC,EAAiC;MAA7BnB,OAA6B,uEAAnB,EAAmB;MAAfoB,QAAe,uEAAJ,EAAI;;SAC5DD,IAAIE,OAAJ,CAAYZ,aAAWT,OAAX,CAAZ,EAAmC,EAAnC,EAAuCqB,OAAvC,CAA+CZ,OAAUW,QAAV,OAA/C,EAAuE,EAAvE,CAAP;;;AAGF,SAASJ,qBAAT,QAAqD;;MAArBnC,OAAqB;;MAAZD,IAAY,0BAAL,EAAK;;SAC5C,CAACC,OAAD,IAAYA,YAAYD,IAAxB,GAA+B,CAAC,EAAD,EAAKA,IAAL,CAA/B,GAA4C,CAACC,OAAD,EAAUD,IAAV,CAAnD;;;AAGF,AAAO,SAASI,SAAT,CAAmBsC,IAAnB,EAAyB;SACvB,OAAOA,IAAP,KAAgB,QAAhB,GAA2BC,gBAAgBD,IAAhB,CAA3B,GAAmDE,gBAAgBF,IAAhB,CAA1D;;;;;;;;AAQF,SAASE,eAAT,GAAyC;MAAhBC,SAAgB,uEAAJ,EAAI;;SAChCC,OAAOC,OAAP,CAAeF,SAAf,EAA0Bf,GAA1B,CAA8B;;QAAEkB,KAAF;QAASC,OAAT;;WAAsB,CACzD,CAACC,OAAOF,KAAP,CAAD,EAAgBE,OAAOF,KAAP,IAAgB,CAAhC,CADyD,EAEzDC,OAFyD,CAAtB;GAA9B,CAAP;;;;;;;;AAWF,SAASN,eAAT,GAAyC;MAAhBE,SAAgB,uEAAJ,EAAI;;SAChCA,UAAUM,KAAV,CAAgB,GAAhB,EAAqBrB,GAArB,CAAyB,UAACsB,KAAD,EAAW;uBACdA,MAAMD,KAAN,CAAY,GAAZ,CADc;;QAClCE,OADkC;QACzBJ,OADyB;;6BAEpBI,QAAQF,KAAR,CAAc,GAAd,EAAmBrB,GAAnB,CAAuBoB,MAAvB,CAFoB;;QAElCF,KAFkC;QAE3BM,GAF2B;;;;;;WAMlC,CAAC,CAACN,KAAD,EAAQM,MAAMA,MAAM,CAAZ,GAAgBN,QAAQ,CAAhC,CAAD,EAAqCC,OAArC,CAAP;GANK,CAAP;;;;;;;;;AAgBF,AAAO,SAASjC,aAAT,GAAiD;MAA1BhB,IAA0B,uEAAnB,EAAmB;MAAfG,QAAe,uEAAJ,EAAI;;MAClDoD,cAAc,CAAlB;;SAEOpD,SAASqD,MAAT,CAAgB,UAACC,KAAD,SAAkCC,KAAlC,EAAyCC,MAAzC,EAAoD;;;QAA1CX,KAA0C;QAAnCM,GAAmC;QAA7BM,QAA6B;;;QAErEZ,UAAUO,WAAd,EAA2B;YACnBjB,IAAN,CAAW,CAAC,EAAD,EAAKtC,KAAKkB,KAAL,CAAWqC,WAAX,EAAwBP,KAAxB,CAAL,CAAX;;;;UAIIV,IAAN,CAAW,CAACsB,QAAD,EAAW5D,KAAKkB,KAAL,CAAW8B,KAAX,EAAkBM,GAAlB,CAAX,CAAX;;;QAGIA,MAAMtD,KAAKM,MAAX,IAAqB,CAACqD,OAAOD,QAAQ,CAAf,CAA1B,EAA6C;YACrCpB,IAAN,CAAW,CAAC,EAAD,EAAKtC,KAAKkB,KAAL,CAAWoC,GAAX,CAAL,CAAX;;;kBAGYA,GAAd;WACOG,KAAP;GAfK,EAgBJ,EAhBI,CAAP;;;;;;;;AC9HF,IAAMI,UAAUC,OAAOC,IAAjB,iBAAN;;AAQA,IAAMC,OAAOF,OAAOC,IAAd,kBAAN;;AAUA,IAAME,OAAOH,OAAOC,IAAd,kBAAN;;AAWA,IAAMG,OAAOJ,OAAOC,IAAd,kBAAN;;AAIA,SAASI,SAAT,OAAwE;MAAnDnE,IAAmD,QAAnDA,IAAmD;MAA7CC,OAA6C,QAA7CA,OAA6C;MAApCC,IAAoC,QAApCA,IAAoC;MAA9BkE,QAA8B,QAA9BA,QAA8B;MAApBC,MAAoB,QAApBA,MAAoB;MAATC,KAAS;;MAChEb,QAAQ1D,YAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,IAA3B,CAAd;;SAEOmE,SACLA,OAAO,EAAEZ,YAAF,EAAP,CADK,GAGL;WAAA;eAAS,MAAK,IAAd,IAAuBa,KAAvB;UACSxC,GAAN,CAAU,iBAAmB4B,KAAnB;;UAAEE,QAAF;UAAYW,IAAZ;;;;;;cAGT;YAAM,KAAKb,KAAX;sBACe;gBAAA;;;WADf;;gBAEE;;;;;;KALH;GAJL;;;AAwBFS,UAAUK,YAAV,GAAyB;WACd,EADc;QAEjB,EAFiB;YAGb;CAHZ;;AAMAL,UAAUN,OAAV,GAAoBA,OAApB;AACAM,UAAUH,IAAV,GAAiBA,IAAjB;AACAG,UAAUF,IAAV,GAAiBA,IAAjB;AACAE,UAAUD,IAAV,GAAiBA,IAAjB;;;;"}